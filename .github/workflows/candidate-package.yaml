name: Publish NPM Package on merge (candidate)

on:
    push:
        branches:
            - candidate

jobs:
    candidate-package:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                package:
                    - ketchup-lite
                    - ketchup-lite-react
                    - ketchup-lite-react-ssr
                    - ketchup-lite-hydrate

        steps:
            - uses: actions/checkout@v4

            - name: Clear Yarn cache
              run: yarn cache clean

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18.x'
                  registry-url: 'https://registry.npmjs.org'

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Bump Version and Create Pre-release
              id: bump_version
              run: |
                  PACKAGE_DIR=packages/${{ matrix.package }}
                  CURRENT_VERSION=$(node -p "require('./$PACKAGE_DIR/package.json').version")
                  PRE_RELEASE_TAG="rc"

                  # Extract the base version (e.g., 2.0.1 from 2.0.1)
                  BASE_VERSION=$(echo $CURRENT_VERSION | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+')

                  # Check if the base version exists in the registry
                  if npm view ${{ matrix.package }}@${BASE_VERSION} versions --json > /dev/null 2>&1; then
                    # Find the next pre-release number
                    NEXT_PRE_RELEASE=$(npm view ${{ matrix.package }}@${BASE_VERSION} versions --json | \
                      jq -r 'map(select(test("-rc\\.[0-9]+$"))) | map(split("-rc.") | .[1] | tonumber) | max + 1 // 1')
                  else
                    # Base version not found, start with rc.1
                    NEXT_PRE_RELEASE=1
                  fi

                  NEW_VERSION="${BASE_VERSION}-rc.${NEXT_PRE_RELEASE}"
                  echo "New version: $NEW_VERSION"

                  # Update package.json
                  jq ".version = \"$NEW_VERSION\"" $PACKAGE_DIR/package.json > temp.json && mv temp.json $PACKAGE_DIR/package.json

                  # Output the new version for later steps
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: Validate Version
              run: |
                  PACKAGE_DIR=packages/${{ matrix.package }}
                  VERSION=$(node -p "require('./$PACKAGE_DIR/package.json').version")
                  if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
                    echo "Version $VERSION does not follow the rc pre-release format."
                    exit 1
                  fi

            - name: Commit Version Bump
              run: |
                  PACKAGE_DIR=packages/${{ matrix.package }}
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add $PACKAGE_DIR/package.json
                  git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} for ${{ matrix.package }}"

            - name: Push Version Bump
              uses: ad-m/github-push-action@v0.6.0
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Packages
              run: yarn build

            - name: Publish Package
              run: |
                  PACKAGE_DIR=packages/${{ matrix.package }}
                  cd $PACKAGE_DIR
                  npm publish --tag rc
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
