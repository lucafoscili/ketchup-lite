/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KupButtonEventPayload, KupButtonStates, KupButtonStyling } from "./components/kup-button/kup-button-declarations";
import { GenericObject } from "./types/GenericTypes";
export { KupButtonEventPayload, KupButtonStates, KupButtonStyling } from "./components/kup-button/kup-button-declarations";
export { GenericObject } from "./types/GenericTypes";
export namespace Components {
    interface KupButton {
        /**
          * Sets the type of the button.
          * @default ""
          * @example // To set the button type to "submit" <kup-button buttonType="submit"></kup-button>
         */
        "buttonType": string;
        /**
          * When set to true, the icon button state will be on.
          * @default false
          * @example // To set the initial button's checked state to true <kup-button checked={true}></kup-button>
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https://ketchup.smeup.com/ketchup-showcase/#/customization
          * @example // To apply a custom style to the button <kup-button customStyle="your-custom-style"></kup-button>
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
          * @example // To disable the button <kup-button disabled={true}></kup-button>
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's properties and descriptions.
          * @param descriptions - When true, includes descriptions for each property.
          * @returns Promise resolved with an object containing the component's properties.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's current state.
          * @returns Promise resolved with the current state of the component.
         */
        "getValue": () => Promise<KupButtonStates>;
        /**
          * When set, the button will show this icon.
          * @default ""
          * @example // To set an icon for the button <kup-button icon="your-icon-name"></kup-button>
         */
        "icon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
          * @example // To set a specific icon for the button's off state <kup-button iconOff="your-icon-name-off"></kup-button>
         */
        "iconOff": string;
        /**
          * When set, the button will show this text.
          * @default ""
          * @example // To set text for the button <kup-button label="Click Me"></kup-button>
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the this to the component.
          * @param this - Object containing this that will be set to the component.
         */
        "setProps": (this: GenericObject) => Promise<void>;
        /**
          * Sets the component's state.
          * @param value - The new state to be set on the component.
          * @returns
         */
        "setValue": (value: KupButtonStates) => Promise<void>;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
          * @example // To show a spinner within the button <kup-button showSpinner={true}></kup-button>
         */
        "showSpinner": boolean;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @example // To set the button to have an outlined style <kup-button styling="outlined"></kup-button>
          * @see KupButtonStyling - For a list of available styles.
         */
        "styling": KupButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
          * @example // To make the button toggable <kup-button toggable={true}></kup-button>
         */
        "toggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
          * @example // To set the icon to show after the text <kup-button trailingIcon={true}></kup-button>
         */
        "trailingIcon": boolean;
    }
}
export interface KupButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKupButtonElement;
}
declare global {
    interface HTMLKupButtonElementEventMap {
        "kup-button-event": KupButtonEventPayload;
    }
    interface HTMLKupButtonElement extends Components.KupButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKupButtonElementEventMap>(type: K, listener: (this: HTMLKupButtonElement, ev: KupButtonCustomEvent<HTMLKupButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKupButtonElementEventMap>(type: K, listener: (this: HTMLKupButtonElement, ev: KupButtonCustomEvent<HTMLKupButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKupButtonElement: {
        prototype: HTMLKupButtonElement;
        new (): HTMLKupButtonElement;
    };
    interface HTMLElementTagNameMap {
        "kup-button": HTMLKupButtonElement;
    }
}
declare namespace LocalJSX {
    interface KupButton {
        /**
          * Sets the type of the button.
          * @default ""
          * @example // To set the button type to "submit" <kup-button buttonType="submit"></kup-button>
         */
        "buttonType"?: string;
        /**
          * When set to true, the icon button state will be on.
          * @default false
          * @example // To set the initial button's checked state to true <kup-button checked={true}></kup-button>
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https://ketchup.smeup.com/ketchup-showcase/#/customization
          * @example // To apply a custom style to the button <kup-button customStyle="your-custom-style"></kup-button>
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
          * @example // To disable the button <kup-button disabled={true}></kup-button>
         */
        "disabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
          * @example // To set an icon for the button <kup-button icon="your-icon-name"></kup-button>
         */
        "icon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
          * @example // To set a specific icon for the button's off state <kup-button iconOff="your-icon-name-off"></kup-button>
         */
        "iconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default ""
          * @example // To set text for the button <kup-button label="Click Me"></kup-button>
         */
        "label"?: string;
        /**
          * Describes event emitted when button loses focus.
         */
        "onKup-button-event"?: (event: KupButtonCustomEvent<KupButtonEventPayload>) => void;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
          * @example // To show a spinner within the button <kup-button showSpinner={true}></kup-button>
         */
        "showSpinner"?: boolean;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @example // To set the button to have an outlined style <kup-button styling="outlined"></kup-button>
          * @see KupButtonStyling - For a list of available styles.
         */
        "styling"?: KupButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
          * @example // To make the button toggable <kup-button toggable={true}></kup-button>
         */
        "toggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
          * @example // To set the icon to show after the text <kup-button trailingIcon={true}></kup-button>
         */
        "trailingIcon"?: boolean;
    }
    interface IntrinsicElements {
        "kup-button": KupButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kup-button": LocalJSX.KupButton & JSXBase.HTMLAttributes<HTMLKupButtonElement>;
        }
    }
}
