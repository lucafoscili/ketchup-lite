/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KulArticleDataset } from "./components/kul-article/kul-article-declarations";
import { GenericObject, KulEventPayload } from "./types/GenericTypes";
import { KulDebugComponentInfo } from "./managers/kul-debug/kul-debug-declarations";
import { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
import { KulButtonEventPayload, KulButtonState, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
import { KulDataDataset, KulDataNode, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
import { KulChartEventPayload, KulChartLegendPlacement, KulChartType } from "./components/kul-chart/kul-chart-declarations";
import { XAXisComponentOption, YAXisComponentOption } from "echarts";
import { KulDataDataset as KulDataDataset1, KulDebugComponentInfo as KulDebugComponentInfo1 } from "./components";
import { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
import { KulLazyRenderMode } from "./components/kul-lazy/kul-lazy-declarations";
import { KulPhotoframeEventPayload } from "./components/kul-photoframe/kul-photoframe-declarations";
import { KulTabbarEventPayload, KulTabbarState } from "./components/kul-tabbar/kul-tabbar-declarations";
import { KulTextfieldHelper, KulTextfieldStyling } from "./components/kul-textfield/kul-textfield-declarations";
import { KulUploadEventPayload } from "./components/kul-upload/kul-upload-declarations";
export { KulArticleDataset } from "./components/kul-article/kul-article-declarations";
export { GenericObject, KulEventPayload } from "./types/GenericTypes";
export { KulDebugComponentInfo } from "./managers/kul-debug/kul-debug-declarations";
export { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
export { KulButtonEventPayload, KulButtonState, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
export { KulDataDataset, KulDataNode, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
export { KulChartEventPayload, KulChartLegendPlacement, KulChartType } from "./components/kul-chart/kul-chart-declarations";
export { XAXisComponentOption, YAXisComponentOption } from "echarts";
export { KulDataDataset as KulDataDataset1, KulDebugComponentInfo as KulDebugComponentInfo1 } from "./components";
export { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
export { KulLazyRenderMode } from "./components/kul-lazy/kul-lazy-declarations";
export { KulPhotoframeEventPayload } from "./components/kul-photoframe/kul-photoframe-declarations";
export { KulTabbarEventPayload, KulTabbarState } from "./components/kul-tabbar/kul-tabbar-declarations";
export { KulTextfieldHelper, KulTextfieldStyling } from "./components/kul-textfield/kul-textfield-declarations";
export { KulUploadEventPayload } from "./components/kul-upload/kul-upload-declarations";
export namespace Components {
    interface KulArticle {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The actual data of the article.
          * @default null
         */
        "kulData": KulArticleDataset;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulBadge {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps": KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulButton {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's properties and descriptions.
          * @param descriptions - When true, includes descriptions for each property.
          * @returns Promise resolved with an object containing the component's properties.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's current state.
          * @returns Promise resolved with the current state of the component.
         */
        "getValue": () => Promise<KulButtonState>;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled": boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff": string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel": string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling": KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon": boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType": | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the component's state.
          * @param value - The new state to be set on the component.
          * @returns
         */
        "setValue": (value: KulButtonState) => Promise<void>;
    }
    interface KulCard {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's shapes.
          * @returns Map of shapes.
         */
        "getShapes": () => Promise<KulDataShapesMap>;
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData": KulDataDataset;
        /**
          * Sets the layout.
          * @default "a"
         */
        "kulLayout": string;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulChart {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the axis of the chart.
          * @default ""
         */
        "kulAxis": string;
        /**
          * Overrides theme's colors.
          * @default []
         */
        "kulColors": string[];
        /**
          * The actual data of the chart.
          * @default null
         */
        "kulData": KulDataDataset;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top, hidden. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default "bottom"
         */
        "kulLegend": KulChartLegendPlacement;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default []
         */
        "kulSeries": string[];
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX": string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * The type of the chart. Supported formats: Bar, Gaussian, Line, Pie, Map and Scatter.
          * @default ["line"]
         */
        "kulTypes": KulChartType[];
        /**
          * Customization options for the x Axis.
          * @default null
         */
        "kulXAxis": XAXisComponentOption;
        /**
          * Customization options for the y Axis.
          * @default null
         */
        "kulYAxis": YAXisComponentOption;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulCode {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the language of the snippet.
          * @default "javascript"
         */
        "kulLanguage": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * String containing the snippet of code to display.
          * @default ""
         */
        "kulValue": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulDrawer {
        /**
          * Closes the drawer.
         */
        "close": () => Promise<void>;
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the state of the drawer.
          * @returns True when opened, false when closed.
         */
        "isOpened": () => Promise<boolean>;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Opens the drawer.
         */
        "open": () => Promise<void>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Opens the drawer when closed and vice-versa.
         */
        "toggle": () => Promise<void>;
    }
    interface KulHeader {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulImage {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps": KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor": string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX": string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY": string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulLazy {
        /**
          * Returns the HTMLElement of the component to lazy load.
          * @returns Lazy loaded component.
         */
        "getComponent": () => Promise<HTMLElement>;
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the tag name of the component to be lazy loaded.
          * @default ""
         */
        "kulComponentName": string;
        /**
          * Sets the data of the component to be lazy loaded.
          * @default null
         */
        "kulComponentProps": unknown;
        /**
          * Decides when the sub-component should be rendered. By default when both the component props exist and the component is in the viewport.
          * @default "both"
         */
        "kulRenderMode": KulLazyRenderMode;
        /**
          * Displays an animated SVG placeholder until the component is loaded.
          * @default true
         */
        "kulShowPlaceholder": boolean;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulPhotoframe {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Html attributes of the picture before the component enters the viewport.
          * @default null
         */
        "kulPlaceholder": GenericObject;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Percentage of the component dimensions entering the viewport (0.1 => 1).
          * @default 0.25
         */
        "kulThreshold": number;
        /**
          * Html attributes of the picture after the component enters the viewport.
          * @default null
         */
        "kulValue": GenericObject;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulShowcase {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulShowcaseArticle {
    }
    interface KulShowcaseBadge {
    }
    interface KulShowcaseButton {
    }
    interface KulShowcaseCard {
    }
    interface KulShowcaseChart {
    }
    interface KulShowcaseCode {
    }
    interface KulShowcaseDebug {
    }
    interface KulShowcaseDrawer {
    }
    interface KulShowcaseHeader {
    }
    interface KulShowcaseImage {
    }
    interface KulShowcaseKulmanager {
    }
    interface KulShowcaseLazy {
    }
    interface KulShowcasePhotoframe {
    }
    interface KulShowcaseProbe {
    }
    interface KulShowcaseSpinner {
    }
    interface KulShowcaseSplash {
    }
    interface KulShowcaseTabbar {
    }
    interface KulShowcaseTextfield {
    }
    interface KulShowcaseToast {
    }
    interface KulShowcaseTree {
    }
    interface KulShowcaseUpload {
    }
    interface KulSpinner {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Specifies if the spinner is animating.
          * @default false
         */
        "kulActive": boolean;
        /**
          * Controls if the component displays as a bar or a spinner.
          * @default false
         */
        "kulBarVariant": boolean;
        /**
          * Defines the width and height of the spinner. In the bar variant, it specifies only the height.
          * @default ""
         */
        "kulDimensions": string;
        /**
          * Applies a blending modal over the component to darken or lighten the view, based on the theme.
          * @default false
         */
        "kulFader": boolean;
        /**
          * Duration needed for the fader to become active.
          * @default 3500
         */
        "kulFaderTimeout": number;
        /**
          * Fills the entire viewport when enabled.
          * @default false
         */
        "kulFullScreen": boolean;
        /**
          * Selects the spinner layout.
          * @default 1
         */
        "kulLayout": number;
        /**
          * Sets a custom style for the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulSplash {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Initial text displayed within the component, typically shown during loading.
          * @default "Loading..." - Indicates that loading or initialization is in progress.
         */
        "kulLabel": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
        /**
          * Initiates the unmount sequence, which removes the component from the DOM after a delay.
          * @param ms - Number of milliseconds
         */
        "unmount": (ms?: number) => Promise<void>;
    }
    interface KulTabbar {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the selected node and its index.
          * @returns Selected node and its index.
         */
        "getValue": () => Promise<KulTabbarState>;
        /**
          * Actual data of the component.
          * @default null
         */
        "kulData": KulDataDataset;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Sets the initial selected node's index.
          * @default null
         */
        "kulValue": number;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the value of the component based on the provided argument.
          * @param value - The index of the node or the id of the node.
          * @returns The newly set value.
         */
        "setValue": (value: number | string) => Promise<KulTabbarState>;
    }
    interface KulTextfield {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Enables or disables the text field to prevent user interaction.
          * @default false
         */
        "kulDisabled": boolean;
        /**
          * Applies a full-width styling to the text field, making it occupy all available horizontal space.
          * @default false
         */
        "kulFullWidth": boolean;
        /**
          * Specifies helper text to display alongside the text field. Helper text can provide additional context or instructions to the user.
          * @default ""
         */
        "kulHelper": KulTextfieldHelper;
        /**
          * Allows customization of the input or textarea element through additional HTML attributes. This can include attributes like 'readonly', 'placeholder', etc., to further customize the behavior or appearance of the input.
          * @default {}
         */
        "kulHtmlAttributes": GenericObject;
        /**
          * Defines the icon to be displayed within the text field. Icons can indicate actions such as search, clear, or provide visual cues related to the input's purpose.
          * @default ""
         */
        "kulIcon": string;
        /**
          * Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected. Labels are especially important for screen readers and users navigating with keyboard-only controls.
          * @default ""
         */
        "kulLabel": string;
        /**
          * Accepts custom CSS styles to apply directly to the text field component. This allows for fine-grained control over the appearance of the component beyond predefined styling options.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Determines the overall styling theme of the text field, affecting its shape and border. Options include 'default', 'outlined', or 'textarea', each offering a distinct visual presentation.
          * @default "raised"
         */
        "kulStyling": KulTextfieldStyling;
        /**
          * Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.
          * @default false
         */
        "kulTrailingIcon": boolean;
        /**
          * Initializes the text field with a default value when the component is first rendered. This can be used to pre-fill forms or set a starting point for user input.
          * @default ""
         */
        "kulValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulToast {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Callback invoked when the toast is closed.
          * @default () => void
         */
        "kulCloseCallback": () => void;
        /**
          * Sets the props of the clickable icon used to close the toast.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }
         */
        "kulCloseIcon": KulImagePropsInterface;
        /**
          * Sets the props of an optional icon that will be displayed along with the message.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }
         */
        "kulIcon": KulImagePropsInterface;
        /**
          * Sets the message of the toast.
          * @default 'Wow, such empty.'
         */
        "kulMessage": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).
          * @default ''
         */
        "kulTimer": number;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulTree {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When enabled, the first level of depth will create an accordion-style appearance for nodes.
          * @default false
         */
        "kulAccordionLayout": boolean;
        /**
          * The actual data of the tree.
          * @default null
         */
        "kulData": KulDataDataset1;
        /**
          * Sets the initial expanded nodes based on the specified depth. If the property is not provided, all nodes in the tree will be expanded.
          * @default null
         */
        "kulInitialExpandedDepth": number;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * When true, nodes can be selected.
          * @default null
         */
        "kulSelectable": boolean;
        /**
          * Enables customization of the component's style.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulUpload {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<File[]>;
        /**
          * Sets the button's label.
          * @default "Upload files..."
         */
        "kulLabel": string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Initializes the component with these files.
          * @default null
         */
        "kulValue": any;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
}
export interface KulArticleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulArticleElement;
}
export interface KulBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulBadgeElement;
}
export interface KulButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulButtonElement;
}
export interface KulCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulCardElement;
}
export interface KulChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulChartElement;
}
export interface KulCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulCodeElement;
}
export interface KulDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulDrawerElement;
}
export interface KulHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulHeaderElement;
}
export interface KulImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulImageElement;
}
export interface KulLazyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulLazyElement;
}
export interface KulPhotoframeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulPhotoframeElement;
}
export interface KulShowcaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulShowcaseElement;
}
export interface KulSpinnerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulSpinnerElement;
}
export interface KulSplashCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulSplashElement;
}
export interface KulTabbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulTabbarElement;
}
export interface KulTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulTextfieldElement;
}
export interface KulToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulToastElement;
}
export interface KulTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulTreeElement;
}
export interface KulUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulUploadElement;
}
declare global {
    interface HTMLKulArticleElementEventMap {
        "kul-article-event": KulEventPayload;
    }
    interface HTMLKulArticleElement extends Components.KulArticle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulArticleElementEventMap>(type: K, listener: (this: HTMLKulArticleElement, ev: KulArticleCustomEvent<HTMLKulArticleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulArticleElementEventMap>(type: K, listener: (this: HTMLKulArticleElement, ev: KulArticleCustomEvent<HTMLKulArticleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulArticleElement: {
        prototype: HTMLKulArticleElement;
        new (): HTMLKulArticleElement;
    };
    interface HTMLKulBadgeElementEventMap {
        "kul-badge-event": KulEventPayload;
    }
    interface HTMLKulBadgeElement extends Components.KulBadge, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulBadgeElement: {
        prototype: HTMLKulBadgeElement;
        new (): HTMLKulBadgeElement;
    };
    interface HTMLKulButtonElementEventMap {
        "kul-button-event": KulButtonEventPayload;
    }
    interface HTMLKulButtonElement extends Components.KulButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulButtonElement: {
        prototype: HTMLKulButtonElement;
        new (): HTMLKulButtonElement;
    };
    interface HTMLKulCardElementEventMap {
        "kul-card-event": KulEventPayload;
    }
    interface HTMLKulCardElement extends Components.KulCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulCardElement: {
        prototype: HTMLKulCardElement;
        new (): HTMLKulCardElement;
    };
    interface HTMLKulChartElementEventMap {
        "kul-echart-event": KulChartEventPayload;
    }
    interface HTMLKulChartElement extends Components.KulChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulChartElementEventMap>(type: K, listener: (this: HTMLKulChartElement, ev: KulChartCustomEvent<HTMLKulChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulChartElementEventMap>(type: K, listener: (this: HTMLKulChartElement, ev: KulChartCustomEvent<HTMLKulChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulChartElement: {
        prototype: HTMLKulChartElement;
        new (): HTMLKulChartElement;
    };
    interface HTMLKulCodeElementEventMap {
        "kul-code-event": KulEventPayload;
    }
    interface HTMLKulCodeElement extends Components.KulCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulCodeElementEventMap>(type: K, listener: (this: HTMLKulCodeElement, ev: KulCodeCustomEvent<HTMLKulCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulCodeElementEventMap>(type: K, listener: (this: HTMLKulCodeElement, ev: KulCodeCustomEvent<HTMLKulCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulCodeElement: {
        prototype: HTMLKulCodeElement;
        new (): HTMLKulCodeElement;
    };
    interface HTMLKulDrawerElementEventMap {
        "kul-drawer-event": KulEventPayload;
    }
    interface HTMLKulDrawerElement extends Components.KulDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulDrawerElementEventMap>(type: K, listener: (this: HTMLKulDrawerElement, ev: KulDrawerCustomEvent<HTMLKulDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulDrawerElementEventMap>(type: K, listener: (this: HTMLKulDrawerElement, ev: KulDrawerCustomEvent<HTMLKulDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulDrawerElement: {
        prototype: HTMLKulDrawerElement;
        new (): HTMLKulDrawerElement;
    };
    interface HTMLKulHeaderElementEventMap {
        "kul-header-event": KulEventPayload;
    }
    interface HTMLKulHeaderElement extends Components.KulHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulHeaderElementEventMap>(type: K, listener: (this: HTMLKulHeaderElement, ev: KulHeaderCustomEvent<HTMLKulHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulHeaderElementEventMap>(type: K, listener: (this: HTMLKulHeaderElement, ev: KulHeaderCustomEvent<HTMLKulHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulHeaderElement: {
        prototype: HTMLKulHeaderElement;
        new (): HTMLKulHeaderElement;
    };
    interface HTMLKulImageElementEventMap {
        "kul-image-event": KulEventPayload;
    }
    interface HTMLKulImageElement extends Components.KulImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulImageElement: {
        prototype: HTMLKulImageElement;
        new (): HTMLKulImageElement;
    };
    interface HTMLKulLazyElementEventMap {
        "kul-lazy-event": KulEventPayload;
    }
    interface HTMLKulLazyElement extends Components.KulLazy, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulLazyElementEventMap>(type: K, listener: (this: HTMLKulLazyElement, ev: KulLazyCustomEvent<HTMLKulLazyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulLazyElementEventMap>(type: K, listener: (this: HTMLKulLazyElement, ev: KulLazyCustomEvent<HTMLKulLazyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulLazyElement: {
        prototype: HTMLKulLazyElement;
        new (): HTMLKulLazyElement;
    };
    interface HTMLKulPhotoframeElementEventMap {
        "kul-photoframe-event": KulPhotoframeEventPayload;
    }
    interface HTMLKulPhotoframeElement extends Components.KulPhotoframe, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulPhotoframeElementEventMap>(type: K, listener: (this: HTMLKulPhotoframeElement, ev: KulPhotoframeCustomEvent<HTMLKulPhotoframeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulPhotoframeElementEventMap>(type: K, listener: (this: HTMLKulPhotoframeElement, ev: KulPhotoframeCustomEvent<HTMLKulPhotoframeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulPhotoframeElement: {
        prototype: HTMLKulPhotoframeElement;
        new (): HTMLKulPhotoframeElement;
    };
    interface HTMLKulShowcaseElementEventMap {
        "kul-showcase-event": KulEventPayload;
    }
    interface HTMLKulShowcaseElement extends Components.KulShowcase, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulShowcaseElementEventMap>(type: K, listener: (this: HTMLKulShowcaseElement, ev: KulShowcaseCustomEvent<HTMLKulShowcaseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulShowcaseElementEventMap>(type: K, listener: (this: HTMLKulShowcaseElement, ev: KulShowcaseCustomEvent<HTMLKulShowcaseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulShowcaseElement: {
        prototype: HTMLKulShowcaseElement;
        new (): HTMLKulShowcaseElement;
    };
    interface HTMLKulShowcaseArticleElement extends Components.KulShowcaseArticle, HTMLStencilElement {
    }
    var HTMLKulShowcaseArticleElement: {
        prototype: HTMLKulShowcaseArticleElement;
        new (): HTMLKulShowcaseArticleElement;
    };
    interface HTMLKulShowcaseBadgeElement extends Components.KulShowcaseBadge, HTMLStencilElement {
    }
    var HTMLKulShowcaseBadgeElement: {
        prototype: HTMLKulShowcaseBadgeElement;
        new (): HTMLKulShowcaseBadgeElement;
    };
    interface HTMLKulShowcaseButtonElement extends Components.KulShowcaseButton, HTMLStencilElement {
    }
    var HTMLKulShowcaseButtonElement: {
        prototype: HTMLKulShowcaseButtonElement;
        new (): HTMLKulShowcaseButtonElement;
    };
    interface HTMLKulShowcaseCardElement extends Components.KulShowcaseCard, HTMLStencilElement {
    }
    var HTMLKulShowcaseCardElement: {
        prototype: HTMLKulShowcaseCardElement;
        new (): HTMLKulShowcaseCardElement;
    };
    interface HTMLKulShowcaseChartElement extends Components.KulShowcaseChart, HTMLStencilElement {
    }
    var HTMLKulShowcaseChartElement: {
        prototype: HTMLKulShowcaseChartElement;
        new (): HTMLKulShowcaseChartElement;
    };
    interface HTMLKulShowcaseCodeElement extends Components.KulShowcaseCode, HTMLStencilElement {
    }
    var HTMLKulShowcaseCodeElement: {
        prototype: HTMLKulShowcaseCodeElement;
        new (): HTMLKulShowcaseCodeElement;
    };
    interface HTMLKulShowcaseDebugElement extends Components.KulShowcaseDebug, HTMLStencilElement {
    }
    var HTMLKulShowcaseDebugElement: {
        prototype: HTMLKulShowcaseDebugElement;
        new (): HTMLKulShowcaseDebugElement;
    };
    interface HTMLKulShowcaseDrawerElement extends Components.KulShowcaseDrawer, HTMLStencilElement {
    }
    var HTMLKulShowcaseDrawerElement: {
        prototype: HTMLKulShowcaseDrawerElement;
        new (): HTMLKulShowcaseDrawerElement;
    };
    interface HTMLKulShowcaseHeaderElement extends Components.KulShowcaseHeader, HTMLStencilElement {
    }
    var HTMLKulShowcaseHeaderElement: {
        prototype: HTMLKulShowcaseHeaderElement;
        new (): HTMLKulShowcaseHeaderElement;
    };
    interface HTMLKulShowcaseImageElement extends Components.KulShowcaseImage, HTMLStencilElement {
    }
    var HTMLKulShowcaseImageElement: {
        prototype: HTMLKulShowcaseImageElement;
        new (): HTMLKulShowcaseImageElement;
    };
    interface HTMLKulShowcaseKulmanagerElement extends Components.KulShowcaseKulmanager, HTMLStencilElement {
    }
    var HTMLKulShowcaseKulmanagerElement: {
        prototype: HTMLKulShowcaseKulmanagerElement;
        new (): HTMLKulShowcaseKulmanagerElement;
    };
    interface HTMLKulShowcaseLazyElement extends Components.KulShowcaseLazy, HTMLStencilElement {
    }
    var HTMLKulShowcaseLazyElement: {
        prototype: HTMLKulShowcaseLazyElement;
        new (): HTMLKulShowcaseLazyElement;
    };
    interface HTMLKulShowcasePhotoframeElement extends Components.KulShowcasePhotoframe, HTMLStencilElement {
    }
    var HTMLKulShowcasePhotoframeElement: {
        prototype: HTMLKulShowcasePhotoframeElement;
        new (): HTMLKulShowcasePhotoframeElement;
    };
    interface HTMLKulShowcaseProbeElement extends Components.KulShowcaseProbe, HTMLStencilElement {
    }
    var HTMLKulShowcaseProbeElement: {
        prototype: HTMLKulShowcaseProbeElement;
        new (): HTMLKulShowcaseProbeElement;
    };
    interface HTMLKulShowcaseSpinnerElement extends Components.KulShowcaseSpinner, HTMLStencilElement {
    }
    var HTMLKulShowcaseSpinnerElement: {
        prototype: HTMLKulShowcaseSpinnerElement;
        new (): HTMLKulShowcaseSpinnerElement;
    };
    interface HTMLKulShowcaseSplashElement extends Components.KulShowcaseSplash, HTMLStencilElement {
    }
    var HTMLKulShowcaseSplashElement: {
        prototype: HTMLKulShowcaseSplashElement;
        new (): HTMLKulShowcaseSplashElement;
    };
    interface HTMLKulShowcaseTabbarElement extends Components.KulShowcaseTabbar, HTMLStencilElement {
    }
    var HTMLKulShowcaseTabbarElement: {
        prototype: HTMLKulShowcaseTabbarElement;
        new (): HTMLKulShowcaseTabbarElement;
    };
    interface HTMLKulShowcaseTextfieldElement extends Components.KulShowcaseTextfield, HTMLStencilElement {
    }
    var HTMLKulShowcaseTextfieldElement: {
        prototype: HTMLKulShowcaseTextfieldElement;
        new (): HTMLKulShowcaseTextfieldElement;
    };
    interface HTMLKulShowcaseToastElement extends Components.KulShowcaseToast, HTMLStencilElement {
    }
    var HTMLKulShowcaseToastElement: {
        prototype: HTMLKulShowcaseToastElement;
        new (): HTMLKulShowcaseToastElement;
    };
    interface HTMLKulShowcaseTreeElement extends Components.KulShowcaseTree, HTMLStencilElement {
    }
    var HTMLKulShowcaseTreeElement: {
        prototype: HTMLKulShowcaseTreeElement;
        new (): HTMLKulShowcaseTreeElement;
    };
    interface HTMLKulShowcaseUploadElement extends Components.KulShowcaseUpload, HTMLStencilElement {
    }
    var HTMLKulShowcaseUploadElement: {
        prototype: HTMLKulShowcaseUploadElement;
        new (): HTMLKulShowcaseUploadElement;
    };
    interface HTMLKulSpinnerElementEventMap {
        "kul-spinner-event": KulEventPayload;
    }
    interface HTMLKulSpinnerElement extends Components.KulSpinner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulSpinnerElementEventMap>(type: K, listener: (this: HTMLKulSpinnerElement, ev: KulSpinnerCustomEvent<HTMLKulSpinnerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulSpinnerElementEventMap>(type: K, listener: (this: HTMLKulSpinnerElement, ev: KulSpinnerCustomEvent<HTMLKulSpinnerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulSpinnerElement: {
        prototype: HTMLKulSpinnerElement;
        new (): HTMLKulSpinnerElement;
    };
    interface HTMLKulSplashElementEventMap {
        "kul-splash-event": KulEventPayload;
    }
    interface HTMLKulSplashElement extends Components.KulSplash, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulSplashElementEventMap>(type: K, listener: (this: HTMLKulSplashElement, ev: KulSplashCustomEvent<HTMLKulSplashElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulSplashElementEventMap>(type: K, listener: (this: HTMLKulSplashElement, ev: KulSplashCustomEvent<HTMLKulSplashElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulSplashElement: {
        prototype: HTMLKulSplashElement;
        new (): HTMLKulSplashElement;
    };
    interface HTMLKulTabbarElementEventMap {
        "kul-tabbar-event": KulTabbarEventPayload;
    }
    interface HTMLKulTabbarElement extends Components.KulTabbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulTabbarElementEventMap>(type: K, listener: (this: HTMLKulTabbarElement, ev: KulTabbarCustomEvent<HTMLKulTabbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulTabbarElementEventMap>(type: K, listener: (this: HTMLKulTabbarElement, ev: KulTabbarCustomEvent<HTMLKulTabbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulTabbarElement: {
        prototype: HTMLKulTabbarElement;
        new (): HTMLKulTabbarElement;
    };
    interface HTMLKulTextfieldElementEventMap {
        "kul-textfield-event": KulEventPayload;
    }
    interface HTMLKulTextfieldElement extends Components.KulTextfield, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulTextfieldElementEventMap>(type: K, listener: (this: HTMLKulTextfieldElement, ev: KulTextfieldCustomEvent<HTMLKulTextfieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulTextfieldElementEventMap>(type: K, listener: (this: HTMLKulTextfieldElement, ev: KulTextfieldCustomEvent<HTMLKulTextfieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulTextfieldElement: {
        prototype: HTMLKulTextfieldElement;
        new (): HTMLKulTextfieldElement;
    };
    interface HTMLKulToastElementEventMap {
        "kul-toast-event": KulEventPayload;
    }
    interface HTMLKulToastElement extends Components.KulToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulToastElementEventMap>(type: K, listener: (this: HTMLKulToastElement, ev: KulToastCustomEvent<HTMLKulToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulToastElementEventMap>(type: K, listener: (this: HTMLKulToastElement, ev: KulToastCustomEvent<HTMLKulToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulToastElement: {
        prototype: HTMLKulToastElement;
        new (): HTMLKulToastElement;
    };
    interface HTMLKulTreeElementEventMap {
        "kul-tree-event": KulEventPayload;
    }
    interface HTMLKulTreeElement extends Components.KulTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulTreeElementEventMap>(type: K, listener: (this: HTMLKulTreeElement, ev: KulTreeCustomEvent<HTMLKulTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulTreeElementEventMap>(type: K, listener: (this: HTMLKulTreeElement, ev: KulTreeCustomEvent<HTMLKulTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulTreeElement: {
        prototype: HTMLKulTreeElement;
        new (): HTMLKulTreeElement;
    };
    interface HTMLKulUploadElementEventMap {
        "kul-upload-event": KulUploadEventPayload;
    }
    interface HTMLKulUploadElement extends Components.KulUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulUploadElementEventMap>(type: K, listener: (this: HTMLKulUploadElement, ev: KulUploadCustomEvent<HTMLKulUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulUploadElementEventMap>(type: K, listener: (this: HTMLKulUploadElement, ev: KulUploadCustomEvent<HTMLKulUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulUploadElement: {
        prototype: HTMLKulUploadElement;
        new (): HTMLKulUploadElement;
    };
    interface HTMLElementTagNameMap {
        "kul-article": HTMLKulArticleElement;
        "kul-badge": HTMLKulBadgeElement;
        "kul-button": HTMLKulButtonElement;
        "kul-card": HTMLKulCardElement;
        "kul-chart": HTMLKulChartElement;
        "kul-code": HTMLKulCodeElement;
        "kul-drawer": HTMLKulDrawerElement;
        "kul-header": HTMLKulHeaderElement;
        "kul-image": HTMLKulImageElement;
        "kul-lazy": HTMLKulLazyElement;
        "kul-photoframe": HTMLKulPhotoframeElement;
        "kul-showcase": HTMLKulShowcaseElement;
        "kul-showcase-article": HTMLKulShowcaseArticleElement;
        "kul-showcase-badge": HTMLKulShowcaseBadgeElement;
        "kul-showcase-button": HTMLKulShowcaseButtonElement;
        "kul-showcase-card": HTMLKulShowcaseCardElement;
        "kul-showcase-chart": HTMLKulShowcaseChartElement;
        "kul-showcase-code": HTMLKulShowcaseCodeElement;
        "kul-showcase-debug": HTMLKulShowcaseDebugElement;
        "kul-showcase-drawer": HTMLKulShowcaseDrawerElement;
        "kul-showcase-header": HTMLKulShowcaseHeaderElement;
        "kul-showcase-image": HTMLKulShowcaseImageElement;
        "kul-showcase-kulmanager": HTMLKulShowcaseKulmanagerElement;
        "kul-showcase-lazy": HTMLKulShowcaseLazyElement;
        "kul-showcase-photoframe": HTMLKulShowcasePhotoframeElement;
        "kul-showcase-probe": HTMLKulShowcaseProbeElement;
        "kul-showcase-spinner": HTMLKulShowcaseSpinnerElement;
        "kul-showcase-splash": HTMLKulShowcaseSplashElement;
        "kul-showcase-tabbar": HTMLKulShowcaseTabbarElement;
        "kul-showcase-textfield": HTMLKulShowcaseTextfieldElement;
        "kul-showcase-toast": HTMLKulShowcaseToastElement;
        "kul-showcase-tree": HTMLKulShowcaseTreeElement;
        "kul-showcase-upload": HTMLKulShowcaseUploadElement;
        "kul-spinner": HTMLKulSpinnerElement;
        "kul-splash": HTMLKulSplashElement;
        "kul-tabbar": HTMLKulTabbarElement;
        "kul-textfield": HTMLKulTextfieldElement;
        "kul-toast": HTMLKulToastElement;
        "kul-tree": HTMLKulTreeElement;
        "kul-upload": HTMLKulUploadElement;
    }
}
declare namespace LocalJSX {
    interface KulArticle {
        /**
          * The actual data of the article.
          * @default null
         */
        "kulData"?: KulArticleDataset;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-article-event"?: (event: KulArticleCustomEvent<KulEventPayload>) => void;
    }
    interface KulBadge {
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps"?: KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-badge-event"?: (event: KulBadgeCustomEvent<KulEventPayload>) => void;
    }
    interface KulButton {
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling"?: KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon"?: boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType"?: | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue"?: boolean;
        /**
          * Describes event emitted for various button interactions like click, focus, blur.
         */
        "onKul-button-event"?: (event: KulButtonCustomEvent<KulButtonEventPayload>) => void;
    }
    interface KulCard {
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData"?: KulDataDataset;
        /**
          * Sets the layout.
          * @default "a"
         */
        "kulLayout"?: string;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Triggered when an event is fired.
         */
        "onKul-card-event"?: (event: KulCardCustomEvent<KulEventPayload>) => void;
    }
    interface KulChart {
        /**
          * Sets the axis of the chart.
          * @default ""
         */
        "kulAxis"?: string;
        /**
          * Overrides theme's colors.
          * @default []
         */
        "kulColors"?: string[];
        /**
          * The actual data of the chart.
          * @default null
         */
        "kulData"?: KulDataDataset;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top, hidden. Keep in mind that legend types are tied to chart types, some combinations might not work.
          * @default "bottom"
         */
        "kulLegend"?: KulChartLegendPlacement;
        /**
          * The data series to be displayed. They must be of the same type.
          * @default []
         */
        "kulSeries"?: string[];
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX"?: string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * The type of the chart. Supported formats: Bar, Gaussian, Line, Pie, Map and Scatter.
          * @default ["line"]
         */
        "kulTypes"?: KulChartType[];
        /**
          * Customization options for the x Axis.
          * @default null
         */
        "kulXAxis"?: XAXisComponentOption;
        /**
          * Customization options for the y Axis.
          * @default null
         */
        "kulYAxis"?: YAXisComponentOption;
        "onKul-echart-event"?: (event: KulChartCustomEvent<KulChartEventPayload>) => void;
    }
    interface KulCode {
        /**
          * Sets the language of the snippet.
          * @default "javascript"
         */
        "kulLanguage"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * String containing the snippet of code to display.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-code-event"?: (event: KulCodeCustomEvent<KulEventPayload>) => void;
    }
    interface KulDrawer {
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted by the component.
         */
        "onKul-drawer-event"?: (event: KulDrawerCustomEvent<KulEventPayload>) => void;
    }
    interface KulHeader {
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-header-event"?: (event: KulHeaderCustomEvent<KulEventPayload>) => void;
    }
    interface KulImage {
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps"?: KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor"?: string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX"?: string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY"?: string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-image-event"?: (event: KulImageCustomEvent<KulEventPayload>) => void;
    }
    interface KulLazy {
        /**
          * Sets the tag name of the component to be lazy loaded.
          * @default ""
         */
        "kulComponentName"?: string;
        /**
          * Sets the data of the component to be lazy loaded.
          * @default null
         */
        "kulComponentProps"?: unknown;
        /**
          * Decides when the sub-component should be rendered. By default when both the component props exist and the component is in the viewport.
          * @default "both"
         */
        "kulRenderMode"?: KulLazyRenderMode;
        /**
          * Displays an animated SVG placeholder until the component is loaded.
          * @default true
         */
        "kulShowPlaceholder"?: boolean;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes the component's events.
         */
        "onKul-lazy-event"?: (event: KulLazyCustomEvent<KulEventPayload>) => void;
    }
    interface KulPhotoframe {
        /**
          * Html attributes of the picture before the component enters the viewport.
          * @default null
         */
        "kulPlaceholder"?: GenericObject;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Percentage of the component dimensions entering the viewport (0.1 => 1).
          * @default 0.25
         */
        "kulThreshold"?: number;
        /**
          * Html attributes of the picture after the component enters the viewport.
          * @default null
         */
        "kulValue"?: GenericObject;
        /**
          * Describes event emitted.
         */
        "onKul-photoframe-event"?: (event: KulPhotoframeCustomEvent<KulPhotoframeEventPayload>) => void;
    }
    interface KulShowcase {
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-showcase-event"?: (event: KulShowcaseCustomEvent<KulEventPayload>) => void;
    }
    interface KulShowcaseArticle {
    }
    interface KulShowcaseBadge {
    }
    interface KulShowcaseButton {
    }
    interface KulShowcaseCard {
    }
    interface KulShowcaseChart {
    }
    interface KulShowcaseCode {
    }
    interface KulShowcaseDebug {
    }
    interface KulShowcaseDrawer {
    }
    interface KulShowcaseHeader {
    }
    interface KulShowcaseImage {
    }
    interface KulShowcaseKulmanager {
    }
    interface KulShowcaseLazy {
    }
    interface KulShowcasePhotoframe {
    }
    interface KulShowcaseProbe {
    }
    interface KulShowcaseSpinner {
    }
    interface KulShowcaseSplash {
    }
    interface KulShowcaseTabbar {
    }
    interface KulShowcaseTextfield {
    }
    interface KulShowcaseToast {
    }
    interface KulShowcaseTree {
    }
    interface KulShowcaseUpload {
    }
    interface KulSpinner {
        /**
          * Specifies if the spinner is animating.
          * @default false
         */
        "kulActive"?: boolean;
        /**
          * Controls if the component displays as a bar or a spinner.
          * @default false
         */
        "kulBarVariant"?: boolean;
        /**
          * Defines the width and height of the spinner. In the bar variant, it specifies only the height.
          * @default ""
         */
        "kulDimensions"?: string;
        /**
          * Applies a blending modal over the component to darken or lighten the view, based on the theme.
          * @default false
         */
        "kulFader"?: boolean;
        /**
          * Duration needed for the fader to become active.
          * @default 3500
         */
        "kulFaderTimeout"?: number;
        /**
          * Fills the entire viewport when enabled.
          * @default false
         */
        "kulFullScreen"?: boolean;
        /**
          * Selects the spinner layout.
          * @default 1
         */
        "kulLayout"?: number;
        /**
          * Sets a custom style for the component.
          * @default ""
         */
        "kulStyle"?: string;
        "onKul-spinner-event"?: (event: KulSpinnerCustomEvent<KulEventPayload>) => void;
    }
    interface KulSplash {
        /**
          * Initial text displayed within the component, typically shown during loading.
          * @default "Loading..." - Indicates that loading or initialization is in progress.
         */
        "kulLabel"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-splash-event"?: (event: KulSplashCustomEvent<KulEventPayload>) => void;
    }
    interface KulTabbar {
        /**
          * Actual data of the component.
          * @default null
         */
        "kulData"?: KulDataDataset;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Sets the initial selected node's index.
          * @default null
         */
        "kulValue"?: number;
        /**
          * Describes events emitted.
         */
        "onKul-tabbar-event"?: (event: KulTabbarCustomEvent<KulTabbarEventPayload>) => void;
    }
    interface KulTextfield {
        /**
          * Enables or disables the text field to prevent user interaction.
          * @default false
         */
        "kulDisabled"?: boolean;
        /**
          * Applies a full-width styling to the text field, making it occupy all available horizontal space.
          * @default false
         */
        "kulFullWidth"?: boolean;
        /**
          * Specifies helper text to display alongside the text field. Helper text can provide additional context or instructions to the user.
          * @default ""
         */
        "kulHelper"?: KulTextfieldHelper;
        /**
          * Allows customization of the input or textarea element through additional HTML attributes. This can include attributes like 'readonly', 'placeholder', etc., to further customize the behavior or appearance of the input.
          * @default {}
         */
        "kulHtmlAttributes"?: GenericObject;
        /**
          * Defines the icon to be displayed within the text field. Icons can indicate actions such as search, clear, or provide visual cues related to the input's purpose.
          * @default ""
         */
        "kulIcon"?: string;
        /**
          * Assigns a label to the text field, improving accessibility and providing context to the user about what kind of input is expected. Labels are especially important for screen readers and users navigating with keyboard-only controls.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * Accepts custom CSS styles to apply directly to the text field component. This allows for fine-grained control over the appearance of the component beyond predefined styling options.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Determines the overall styling theme of the text field, affecting its shape and border. Options include 'default', 'outlined', or 'textarea', each offering a distinct visual presentation.
          * @default "raised"
         */
        "kulStyling"?: KulTextfieldStyling;
        /**
          * Controls whether the icon should appear after the text input, typically used for action buttons like clear or search.
          * @default false
         */
        "kulTrailingIcon"?: boolean;
        /**
          * Initializes the text field with a default value when the component is first rendered. This can be used to pre-fill forms or set a starting point for user input.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-textfield-event"?: (event: KulTextfieldCustomEvent<KulEventPayload>) => void;
    }
    interface KulToast {
        /**
          * Callback invoked when the toast is closed.
          * @default () => void
         */
        "kulCloseCallback"?: () => void;
        /**
          * Sets the props of the clickable icon used to close the toast.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }
         */
        "kulCloseIcon"?: KulImagePropsInterface;
        /**
          * Sets the props of an optional icon that will be displayed along with the message.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }
         */
        "kulIcon"?: KulImagePropsInterface;
        /**
          * Sets the message of the toast.
          * @default 'Wow, such empty.'
         */
        "kulMessage"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).
          * @default ''
         */
        "kulTimer"?: number;
        /**
          * Describes event emitted.
         */
        "onKul-toast-event"?: (event: KulToastCustomEvent<KulEventPayload>) => void;
    }
    interface KulTree {
        /**
          * When enabled, the first level of depth will create an accordion-style appearance for nodes.
          * @default false
         */
        "kulAccordionLayout"?: boolean;
        /**
          * The actual data of the tree.
          * @default null
         */
        "kulData"?: KulDataDataset1;
        /**
          * Sets the initial expanded nodes based on the specified depth. If the property is not provided, all nodes in the tree will be expanded.
          * @default null
         */
        "kulInitialExpandedDepth"?: number;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * When true, nodes can be selected.
          * @default null
         */
        "kulSelectable"?: boolean;
        /**
          * Enables customization of the component's style.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-tree-event"?: (event: KulTreeCustomEvent<KulEventPayload>) => void;
    }
    interface KulUpload {
        /**
          * Sets the button's label.
          * @default "Upload files..."
         */
        "kulLabel"?: string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Initializes the component with these files.
          * @default null
         */
        "kulValue"?: any;
        /**
          * Describes event emitted.
         */
        "onKul-upload-event"?: (event: KulUploadCustomEvent<KulUploadEventPayload>) => void;
    }
    interface IntrinsicElements {
        "kul-article": KulArticle;
        "kul-badge": KulBadge;
        "kul-button": KulButton;
        "kul-card": KulCard;
        "kul-chart": KulChart;
        "kul-code": KulCode;
        "kul-drawer": KulDrawer;
        "kul-header": KulHeader;
        "kul-image": KulImage;
        "kul-lazy": KulLazy;
        "kul-photoframe": KulPhotoframe;
        "kul-showcase": KulShowcase;
        "kul-showcase-article": KulShowcaseArticle;
        "kul-showcase-badge": KulShowcaseBadge;
        "kul-showcase-button": KulShowcaseButton;
        "kul-showcase-card": KulShowcaseCard;
        "kul-showcase-chart": KulShowcaseChart;
        "kul-showcase-code": KulShowcaseCode;
        "kul-showcase-debug": KulShowcaseDebug;
        "kul-showcase-drawer": KulShowcaseDrawer;
        "kul-showcase-header": KulShowcaseHeader;
        "kul-showcase-image": KulShowcaseImage;
        "kul-showcase-kulmanager": KulShowcaseKulmanager;
        "kul-showcase-lazy": KulShowcaseLazy;
        "kul-showcase-photoframe": KulShowcasePhotoframe;
        "kul-showcase-probe": KulShowcaseProbe;
        "kul-showcase-spinner": KulShowcaseSpinner;
        "kul-showcase-splash": KulShowcaseSplash;
        "kul-showcase-tabbar": KulShowcaseTabbar;
        "kul-showcase-textfield": KulShowcaseTextfield;
        "kul-showcase-toast": KulShowcaseToast;
        "kul-showcase-tree": KulShowcaseTree;
        "kul-showcase-upload": KulShowcaseUpload;
        "kul-spinner": KulSpinner;
        "kul-splash": KulSplash;
        "kul-tabbar": KulTabbar;
        "kul-textfield": KulTextfield;
        "kul-toast": KulToast;
        "kul-tree": KulTree;
        "kul-upload": KulUpload;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kul-article": LocalJSX.KulArticle & JSXBase.HTMLAttributes<HTMLKulArticleElement>;
            "kul-badge": LocalJSX.KulBadge & JSXBase.HTMLAttributes<HTMLKulBadgeElement>;
            "kul-button": LocalJSX.KulButton & JSXBase.HTMLAttributes<HTMLKulButtonElement>;
            "kul-card": LocalJSX.KulCard & JSXBase.HTMLAttributes<HTMLKulCardElement>;
            "kul-chart": LocalJSX.KulChart & JSXBase.HTMLAttributes<HTMLKulChartElement>;
            "kul-code": LocalJSX.KulCode & JSXBase.HTMLAttributes<HTMLKulCodeElement>;
            "kul-drawer": LocalJSX.KulDrawer & JSXBase.HTMLAttributes<HTMLKulDrawerElement>;
            "kul-header": LocalJSX.KulHeader & JSXBase.HTMLAttributes<HTMLKulHeaderElement>;
            "kul-image": LocalJSX.KulImage & JSXBase.HTMLAttributes<HTMLKulImageElement>;
            "kul-lazy": LocalJSX.KulLazy & JSXBase.HTMLAttributes<HTMLKulLazyElement>;
            "kul-photoframe": LocalJSX.KulPhotoframe & JSXBase.HTMLAttributes<HTMLKulPhotoframeElement>;
            "kul-showcase": LocalJSX.KulShowcase & JSXBase.HTMLAttributes<HTMLKulShowcaseElement>;
            "kul-showcase-article": LocalJSX.KulShowcaseArticle & JSXBase.HTMLAttributes<HTMLKulShowcaseArticleElement>;
            "kul-showcase-badge": LocalJSX.KulShowcaseBadge & JSXBase.HTMLAttributes<HTMLKulShowcaseBadgeElement>;
            "kul-showcase-button": LocalJSX.KulShowcaseButton & JSXBase.HTMLAttributes<HTMLKulShowcaseButtonElement>;
            "kul-showcase-card": LocalJSX.KulShowcaseCard & JSXBase.HTMLAttributes<HTMLKulShowcaseCardElement>;
            "kul-showcase-chart": LocalJSX.KulShowcaseChart & JSXBase.HTMLAttributes<HTMLKulShowcaseChartElement>;
            "kul-showcase-code": LocalJSX.KulShowcaseCode & JSXBase.HTMLAttributes<HTMLKulShowcaseCodeElement>;
            "kul-showcase-debug": LocalJSX.KulShowcaseDebug & JSXBase.HTMLAttributes<HTMLKulShowcaseDebugElement>;
            "kul-showcase-drawer": LocalJSX.KulShowcaseDrawer & JSXBase.HTMLAttributes<HTMLKulShowcaseDrawerElement>;
            "kul-showcase-header": LocalJSX.KulShowcaseHeader & JSXBase.HTMLAttributes<HTMLKulShowcaseHeaderElement>;
            "kul-showcase-image": LocalJSX.KulShowcaseImage & JSXBase.HTMLAttributes<HTMLKulShowcaseImageElement>;
            "kul-showcase-kulmanager": LocalJSX.KulShowcaseKulmanager & JSXBase.HTMLAttributes<HTMLKulShowcaseKulmanagerElement>;
            "kul-showcase-lazy": LocalJSX.KulShowcaseLazy & JSXBase.HTMLAttributes<HTMLKulShowcaseLazyElement>;
            "kul-showcase-photoframe": LocalJSX.KulShowcasePhotoframe & JSXBase.HTMLAttributes<HTMLKulShowcasePhotoframeElement>;
            "kul-showcase-probe": LocalJSX.KulShowcaseProbe & JSXBase.HTMLAttributes<HTMLKulShowcaseProbeElement>;
            "kul-showcase-spinner": LocalJSX.KulShowcaseSpinner & JSXBase.HTMLAttributes<HTMLKulShowcaseSpinnerElement>;
            "kul-showcase-splash": LocalJSX.KulShowcaseSplash & JSXBase.HTMLAttributes<HTMLKulShowcaseSplashElement>;
            "kul-showcase-tabbar": LocalJSX.KulShowcaseTabbar & JSXBase.HTMLAttributes<HTMLKulShowcaseTabbarElement>;
            "kul-showcase-textfield": LocalJSX.KulShowcaseTextfield & JSXBase.HTMLAttributes<HTMLKulShowcaseTextfieldElement>;
            "kul-showcase-toast": LocalJSX.KulShowcaseToast & JSXBase.HTMLAttributes<HTMLKulShowcaseToastElement>;
            "kul-showcase-tree": LocalJSX.KulShowcaseTree & JSXBase.HTMLAttributes<HTMLKulShowcaseTreeElement>;
            "kul-showcase-upload": LocalJSX.KulShowcaseUpload & JSXBase.HTMLAttributes<HTMLKulShowcaseUploadElement>;
            "kul-spinner": LocalJSX.KulSpinner & JSXBase.HTMLAttributes<HTMLKulSpinnerElement>;
            "kul-splash": LocalJSX.KulSplash & JSXBase.HTMLAttributes<HTMLKulSplashElement>;
            "kul-tabbar": LocalJSX.KulTabbar & JSXBase.HTMLAttributes<HTMLKulTabbarElement>;
            "kul-textfield": LocalJSX.KulTextfield & JSXBase.HTMLAttributes<HTMLKulTextfieldElement>;
            "kul-toast": LocalJSX.KulToast & JSXBase.HTMLAttributes<HTMLKulToastElement>;
            "kul-tree": LocalJSX.KulTree & JSXBase.HTMLAttributes<HTMLKulTreeElement>;
            "kul-upload": LocalJSX.KulUpload & JSXBase.HTMLAttributes<HTMLKulUploadElement>;
        }
    }
}
