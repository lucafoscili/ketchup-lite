/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
import { GenericObject, KulEventPayload } from "./types/GenericTypes";
import { KulButtonEventPayload, KulButtonStates, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
import { KulDataDataset, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
import { KulCardFamily } from "./components/kul-card/kul-card-declarations";
import { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
export { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
export { GenericObject, KulEventPayload } from "./types/GenericTypes";
export { KulButtonEventPayload, KulButtonStates, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
export { KulDataDataset, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
export { KulCardFamily } from "./components/kul-card/kul-card-declarations";
export { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
export namespace Components {
    interface KulBadge {
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps": KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KulButton {
        /**
          * Used to retrieve component's properties and descriptions.
          * @param descriptions - When true, includes descriptions for each property.
          * @returns Promise resolved with an object containing the component's properties.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's current state.
          * @returns Promise resolved with the current state of the component.
         */
        "getValue": () => Promise<KulButtonStates>;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled": boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff": string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel": string;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling": KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon": boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType": | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the this to the component.
          * @param this - Object containing this that will be set to the component.
         */
        "setProps": (this: GenericObject) => Promise<void>;
        /**
          * Sets the component's state.
          * @param value - The new state to be set on the component.
          * @returns
         */
        "setValue": (value: KulButtonStates) => Promise<void>;
    }
    interface KulCard {
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's shapes.
          * @returns Map of shapes.
         */
        "getShapes": () => Promise<KulDataShapesMap>;
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData": KulDataDataset;
        /**
          * Sets the type of the card.
          * @default KulCardFamily.STANDARD
         */
        "kulLayoutFamily": KulCardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "kulLayoutNumber": number;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
    interface KulImage {
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps": KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor": string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX": string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY": string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the props to the component.
          * @param props - Object containing props that will be set to the component.
         */
        "setProps": (props: GenericObject) => Promise<void>;
    }
}
export interface KulBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulBadgeElement;
}
export interface KulButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulButtonElement;
}
export interface KulCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulCardElement;
}
export interface KulImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulImageElement;
}
declare global {
    interface HTMLKulBadgeElementEventMap {
        "kul-badge-event": KulEventPayload;
    }
    interface HTMLKulBadgeElement extends Components.KulBadge, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulBadgeElement: {
        prototype: HTMLKulBadgeElement;
        new (): HTMLKulBadgeElement;
    };
    interface HTMLKulButtonElementEventMap {
        "kul-button-event": KulButtonEventPayload;
    }
    interface HTMLKulButtonElement extends Components.KulButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulButtonElement: {
        prototype: HTMLKulButtonElement;
        new (): HTMLKulButtonElement;
    };
    interface HTMLKulCardElementEventMap {
        "kul-card-event": KulEventPayload;
    }
    interface HTMLKulCardElement extends Components.KulCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulCardElement: {
        prototype: HTMLKulCardElement;
        new (): HTMLKulCardElement;
    };
    interface HTMLKulImageElementEventMap {
        "kul-image-event": KulEventPayload;
    }
    interface HTMLKulImageElement extends Components.KulImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulImageElement: {
        prototype: HTMLKulImageElement;
        new (): HTMLKulImageElement;
    };
    interface HTMLElementTagNameMap {
        "kul-badge": HTMLKulBadgeElement;
        "kul-button": HTMLKulButtonElement;
        "kul-card": HTMLKulCardElement;
        "kul-image": HTMLKulImageElement;
    }
}
declare namespace LocalJSX {
    interface KulBadge {
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps"?: KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted for various button interactions like click.
         */
        "onKul-badge-event"?: (event: KulBadgeCustomEvent<KulEventPayload>) => void;
    }
    interface KulButton {
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling"?: KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon"?: boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType"?: | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue"?: boolean;
        /**
          * Describes event emitted for various button interactions like click, focus, blur.
         */
        "onKul-button-event"?: (event: KulButtonCustomEvent<KulButtonEventPayload>) => void;
    }
    interface KulCard {
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData"?: KulDataDataset;
        /**
          * Sets the type of the card.
          * @default KulCardFamily.STANDARD
         */
        "kulLayoutFamily"?: KulCardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "kulLayoutNumber"?: number;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Triggered when an event is fired.
         */
        "onKul-card-event"?: (event: KulCardCustomEvent<KulEventPayload>) => void;
    }
    interface KulImage {
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps"?: KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor"?: string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX"?: string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY"?: string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted for various button interactions like click, load.
         */
        "onKul-image-event"?: (event: KulImageCustomEvent<KulEventPayload>) => void;
    }
    interface IntrinsicElements {
        "kul-badge": KulBadge;
        "kul-button": KulButton;
        "kul-card": KulCard;
        "kul-image": KulImage;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kul-badge": LocalJSX.KulBadge & JSXBase.HTMLAttributes<HTMLKulBadgeElement>;
            "kul-button": LocalJSX.KulButton & JSXBase.HTMLAttributes<HTMLKulButtonElement>;
            "kul-card": LocalJSX.KulCard & JSXBase.HTMLAttributes<HTMLKulCardElement>;
            "kul-image": LocalJSX.KulImage & JSXBase.HTMLAttributes<HTMLKulImageElement>;
        }
    }
}
