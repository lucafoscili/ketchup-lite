/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { KulArticleDataset } from "./components/kul-article/kul-article-declarations";
import { GenericObject, KulEventPayload } from "./types/GenericTypes";
import { KulDebugComponentInfo } from "./managers/kul-debug/kul-debug-declarations";
import { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
import { KulButtonEventPayload, KulButtonStates, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
import { KulDataDataset, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
import { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
import { KulArticleDataset as KulArticleDataset1, KulDebugComponentInfo as KulDebugComponentInfo1 } from "./components";
import { KulUploadEventPayload } from "./components/kul-upload/kul-upload-declarations";
export { KulArticleDataset } from "./components/kul-article/kul-article-declarations";
export { GenericObject, KulEventPayload } from "./types/GenericTypes";
export { KulDebugComponentInfo } from "./managers/kul-debug/kul-debug-declarations";
export { KulImagePropsInterface } from "./components/kul-image/kul-image-declarations";
export { KulButtonEventPayload, KulButtonStates, KulButtonStyling } from "./components/kul-button/kul-button-declarations";
export { KulDataDataset, KulDataShapesMap } from "./managers/kul-data/kul-data-declarations";
export { KulBadgePropsInterface } from "./components/kul-badge/kul-badge-declarations";
export { KulArticleDataset as KulArticleDataset1, KulDebugComponentInfo as KulDebugComponentInfo1 } from "./components";
export { KulUploadEventPayload } from "./components/kul-upload/kul-upload-declarations";
export namespace Components {
    interface KulArticle {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The actual data of the article.
          * @default null
         */
        "kulData": KulArticleDataset;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulBadge {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps": KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulButton {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's properties and descriptions.
          * @param descriptions - When true, includes descriptions for each property.
          * @returns Promise resolved with an object containing the component's properties.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's current state.
          * @returns Promise resolved with the current state of the component.
         */
        "getValue": () => Promise<KulButtonStates>;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled": boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff": string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel": string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling": KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon": boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType": | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the component's state.
          * @param value - The new state to be set on the component.
          * @returns
         */
        "setValue": (value: KulButtonStates) => Promise<void>;
    }
    interface KulCard {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Used to retrieve component's shapes.
          * @returns Map of shapes.
         */
        "getShapes": () => Promise<KulDataShapesMap>;
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData": KulDataDataset;
        /**
          * Sets the layout.
          * @default "a"
         */
        "kulLayout": string;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY": string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulCode {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the language of the snippet.
          * @default "javascript"
         */
        "kulLanguage": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * String containing the snippet of code to display.
          * @default ""
         */
        "kulValue": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulImage {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps": KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor": string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner": boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX": string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY": string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulShowcase {
        /**
          * This methods fixes the ids of showcase's documentation datasets.
         */
        "fixDatasets": () => Promise<{ [key: string]: KulArticleDataset1; }>;
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulShowcaseArticle {
    }
    interface KulShowcaseBadge {
    }
    interface KulShowcaseButton {
    }
    interface KulShowcaseCard {
    }
    interface KulShowcaseCode {
    }
    interface KulShowcaseDebug {
    }
    interface KulShowcaseImage {
    }
    interface KulShowcaseKulmanager {
    }
    interface KulShowcaseProbe {
    }
    interface KulShowcaseSpinner {
    }
    interface KulShowcaseSplash {
    }
    interface KulShowcaseToast {
    }
    interface KulShowcaseUpload {
    }
    interface KulSpinner {
        /**
          * Fetches debug information of the component's current state.
          * @returns A promise that resolves with the debug information object.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo1>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Specifies if the spinner is animating.
          * @default false
         */
        "kulActive": boolean;
        /**
          * Controls if the component displays as a bar or a spinner.
          * @default false
         */
        "kulBarVariant": boolean;
        /**
          * Defines the width and height of the spinner. In the bar variant, it specifies only the height.
          * @default ""
         */
        "kulDimensions": string;
        /**
          * Applies a blending modal over the component to darken or lighten the view, based on the theme.
          * @default false
         */
        "kulFader": boolean;
        /**
          * Duration needed for the fader to become active.
          * @default 3500
         */
        "kulFaderTimeout": number;
        /**
          * Fills the entire viewport when enabled.
          * @default false
         */
        "kulFullScreen": boolean;
        /**
          * Selects the spinner layout.
          * @default 1
         */
        "kulLayout": number;
        /**
          * Sets a custom style for the component.
          * @default ""
         */
        "kulStyle": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KulSplash {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Initial text displayed within the component, typically shown during loading.
          * @default "Loading..." - Indicates that loading or initialization is in progress.
         */
        "kulLabel": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
        /**
          * Initiates the unmount sequence, which removes the component from the DOM after a delay.
          * @param ms - Number of milliseconds
         */
        "unmount": (ms?: number) => Promise<void>;
    }
    interface KulToast {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Callback invoked when the toast is closed.
          * @default () => void
         */
        "kulCloseCallback": () => void;
        /**
          * Sets the props of the clickable icon used to close the toast.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }
         */
        "kulCloseIcon": KulImagePropsInterface;
        /**
          * Sets the props of an optional icon that will be displayed along with the message.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }
         */
        "kulIcon": KulImagePropsInterface;
        /**
          * Sets the message of the toast.
          * @default 'Wow, such empty.'
         */
        "kulMessage": string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).
          * @default ''
         */
        "kulTimer": number;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
    interface KulUpload {
        /**
          * Retrieves the debug information reflecting the current state of the component.
          * @returns A promise that resolves to a KulDebugComponentInfo object containing debug information.
         */
        "getDebugInfo": () => Promise<KulDebugComponentInfo>;
        /**
          * Retrieves the properties of the component, with optional descriptions.
          * @param descriptions - If true, returns properties with descriptions; otherwise, returns properties only.
          * @returns A promise that resolves to an object where each key is a property name, optionally with its description.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<File[]>;
        /**
          * Sets the button's label.
          * @default "Upload files..."
         */
        "kulLabel": string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple": boolean;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle": string;
        /**
          * Initializes the component with these files.
          * @default null
         */
        "kulValue": any;
        /**
          * Triggers a re-render of the component to reflect any state changes.
         */
        "refresh": () => Promise<void>;
    }
}
export interface KulArticleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulArticleElement;
}
export interface KulBadgeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulBadgeElement;
}
export interface KulButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulButtonElement;
}
export interface KulCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulCardElement;
}
export interface KulCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulCodeElement;
}
export interface KulImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulImageElement;
}
export interface KulShowcaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulShowcaseElement;
}
export interface KulSpinnerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulSpinnerElement;
}
export interface KulSplashCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulSplashElement;
}
export interface KulToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulToastElement;
}
export interface KulUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKulUploadElement;
}
declare global {
    interface HTMLKulArticleElementEventMap {
        "kul-article-event": KulEventPayload;
    }
    interface HTMLKulArticleElement extends Components.KulArticle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulArticleElementEventMap>(type: K, listener: (this: HTMLKulArticleElement, ev: KulArticleCustomEvent<HTMLKulArticleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulArticleElementEventMap>(type: K, listener: (this: HTMLKulArticleElement, ev: KulArticleCustomEvent<HTMLKulArticleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulArticleElement: {
        prototype: HTMLKulArticleElement;
        new (): HTMLKulArticleElement;
    };
    interface HTMLKulBadgeElementEventMap {
        "kul-badge-event": KulEventPayload;
    }
    interface HTMLKulBadgeElement extends Components.KulBadge, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulBadgeElementEventMap>(type: K, listener: (this: HTMLKulBadgeElement, ev: KulBadgeCustomEvent<HTMLKulBadgeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulBadgeElement: {
        prototype: HTMLKulBadgeElement;
        new (): HTMLKulBadgeElement;
    };
    interface HTMLKulButtonElementEventMap {
        "kul-button-event": KulButtonEventPayload;
    }
    interface HTMLKulButtonElement extends Components.KulButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulButtonElementEventMap>(type: K, listener: (this: HTMLKulButtonElement, ev: KulButtonCustomEvent<HTMLKulButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulButtonElement: {
        prototype: HTMLKulButtonElement;
        new (): HTMLKulButtonElement;
    };
    interface HTMLKulCardElementEventMap {
        "kul-card-event": KulEventPayload;
    }
    interface HTMLKulCardElement extends Components.KulCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulCardElementEventMap>(type: K, listener: (this: HTMLKulCardElement, ev: KulCardCustomEvent<HTMLKulCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulCardElement: {
        prototype: HTMLKulCardElement;
        new (): HTMLKulCardElement;
    };
    interface HTMLKulCodeElementEventMap {
        "kul-code-event": KulEventPayload;
    }
    interface HTMLKulCodeElement extends Components.KulCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulCodeElementEventMap>(type: K, listener: (this: HTMLKulCodeElement, ev: KulCodeCustomEvent<HTMLKulCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulCodeElementEventMap>(type: K, listener: (this: HTMLKulCodeElement, ev: KulCodeCustomEvent<HTMLKulCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulCodeElement: {
        prototype: HTMLKulCodeElement;
        new (): HTMLKulCodeElement;
    };
    interface HTMLKulImageElementEventMap {
        "kul-image-event": KulEventPayload;
    }
    interface HTMLKulImageElement extends Components.KulImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulImageElementEventMap>(type: K, listener: (this: HTMLKulImageElement, ev: KulImageCustomEvent<HTMLKulImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulImageElement: {
        prototype: HTMLKulImageElement;
        new (): HTMLKulImageElement;
    };
    interface HTMLKulShowcaseElementEventMap {
        "kul-showcase-event": KulEventPayload;
    }
    interface HTMLKulShowcaseElement extends Components.KulShowcase, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulShowcaseElementEventMap>(type: K, listener: (this: HTMLKulShowcaseElement, ev: KulShowcaseCustomEvent<HTMLKulShowcaseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulShowcaseElementEventMap>(type: K, listener: (this: HTMLKulShowcaseElement, ev: KulShowcaseCustomEvent<HTMLKulShowcaseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulShowcaseElement: {
        prototype: HTMLKulShowcaseElement;
        new (): HTMLKulShowcaseElement;
    };
    interface HTMLKulShowcaseArticleElement extends Components.KulShowcaseArticle, HTMLStencilElement {
    }
    var HTMLKulShowcaseArticleElement: {
        prototype: HTMLKulShowcaseArticleElement;
        new (): HTMLKulShowcaseArticleElement;
    };
    interface HTMLKulShowcaseBadgeElement extends Components.KulShowcaseBadge, HTMLStencilElement {
    }
    var HTMLKulShowcaseBadgeElement: {
        prototype: HTMLKulShowcaseBadgeElement;
        new (): HTMLKulShowcaseBadgeElement;
    };
    interface HTMLKulShowcaseButtonElement extends Components.KulShowcaseButton, HTMLStencilElement {
    }
    var HTMLKulShowcaseButtonElement: {
        prototype: HTMLKulShowcaseButtonElement;
        new (): HTMLKulShowcaseButtonElement;
    };
    interface HTMLKulShowcaseCardElement extends Components.KulShowcaseCard, HTMLStencilElement {
    }
    var HTMLKulShowcaseCardElement: {
        prototype: HTMLKulShowcaseCardElement;
        new (): HTMLKulShowcaseCardElement;
    };
    interface HTMLKulShowcaseCodeElement extends Components.KulShowcaseCode, HTMLStencilElement {
    }
    var HTMLKulShowcaseCodeElement: {
        prototype: HTMLKulShowcaseCodeElement;
        new (): HTMLKulShowcaseCodeElement;
    };
    interface HTMLKulShowcaseDebugElement extends Components.KulShowcaseDebug, HTMLStencilElement {
    }
    var HTMLKulShowcaseDebugElement: {
        prototype: HTMLKulShowcaseDebugElement;
        new (): HTMLKulShowcaseDebugElement;
    };
    interface HTMLKulShowcaseImageElement extends Components.KulShowcaseImage, HTMLStencilElement {
    }
    var HTMLKulShowcaseImageElement: {
        prototype: HTMLKulShowcaseImageElement;
        new (): HTMLKulShowcaseImageElement;
    };
    interface HTMLKulShowcaseKulmanagerElement extends Components.KulShowcaseKulmanager, HTMLStencilElement {
    }
    var HTMLKulShowcaseKulmanagerElement: {
        prototype: HTMLKulShowcaseKulmanagerElement;
        new (): HTMLKulShowcaseKulmanagerElement;
    };
    interface HTMLKulShowcaseProbeElement extends Components.KulShowcaseProbe, HTMLStencilElement {
    }
    var HTMLKulShowcaseProbeElement: {
        prototype: HTMLKulShowcaseProbeElement;
        new (): HTMLKulShowcaseProbeElement;
    };
    interface HTMLKulShowcaseSpinnerElement extends Components.KulShowcaseSpinner, HTMLStencilElement {
    }
    var HTMLKulShowcaseSpinnerElement: {
        prototype: HTMLKulShowcaseSpinnerElement;
        new (): HTMLKulShowcaseSpinnerElement;
    };
    interface HTMLKulShowcaseSplashElement extends Components.KulShowcaseSplash, HTMLStencilElement {
    }
    var HTMLKulShowcaseSplashElement: {
        prototype: HTMLKulShowcaseSplashElement;
        new (): HTMLKulShowcaseSplashElement;
    };
    interface HTMLKulShowcaseToastElement extends Components.KulShowcaseToast, HTMLStencilElement {
    }
    var HTMLKulShowcaseToastElement: {
        prototype: HTMLKulShowcaseToastElement;
        new (): HTMLKulShowcaseToastElement;
    };
    interface HTMLKulShowcaseUploadElement extends Components.KulShowcaseUpload, HTMLStencilElement {
    }
    var HTMLKulShowcaseUploadElement: {
        prototype: HTMLKulShowcaseUploadElement;
        new (): HTMLKulShowcaseUploadElement;
    };
    interface HTMLKulSpinnerElementEventMap {
        "kul-spinner-event": KulEventPayload;
    }
    interface HTMLKulSpinnerElement extends Components.KulSpinner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulSpinnerElementEventMap>(type: K, listener: (this: HTMLKulSpinnerElement, ev: KulSpinnerCustomEvent<HTMLKulSpinnerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulSpinnerElementEventMap>(type: K, listener: (this: HTMLKulSpinnerElement, ev: KulSpinnerCustomEvent<HTMLKulSpinnerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulSpinnerElement: {
        prototype: HTMLKulSpinnerElement;
        new (): HTMLKulSpinnerElement;
    };
    interface HTMLKulSplashElementEventMap {
        "kul-splash-event": KulEventPayload;
    }
    interface HTMLKulSplashElement extends Components.KulSplash, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulSplashElementEventMap>(type: K, listener: (this: HTMLKulSplashElement, ev: KulSplashCustomEvent<HTMLKulSplashElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulSplashElementEventMap>(type: K, listener: (this: HTMLKulSplashElement, ev: KulSplashCustomEvent<HTMLKulSplashElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulSplashElement: {
        prototype: HTMLKulSplashElement;
        new (): HTMLKulSplashElement;
    };
    interface HTMLKulToastElementEventMap {
        "kul-toast-event": KulEventPayload;
    }
    interface HTMLKulToastElement extends Components.KulToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulToastElementEventMap>(type: K, listener: (this: HTMLKulToastElement, ev: KulToastCustomEvent<HTMLKulToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulToastElementEventMap>(type: K, listener: (this: HTMLKulToastElement, ev: KulToastCustomEvent<HTMLKulToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulToastElement: {
        prototype: HTMLKulToastElement;
        new (): HTMLKulToastElement;
    };
    interface HTMLKulUploadElementEventMap {
        "kul-upload-event": KulUploadEventPayload;
    }
    interface HTMLKulUploadElement extends Components.KulUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKulUploadElementEventMap>(type: K, listener: (this: HTMLKulUploadElement, ev: KulUploadCustomEvent<HTMLKulUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKulUploadElementEventMap>(type: K, listener: (this: HTMLKulUploadElement, ev: KulUploadCustomEvent<HTMLKulUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKulUploadElement: {
        prototype: HTMLKulUploadElement;
        new (): HTMLKulUploadElement;
    };
    interface HTMLElementTagNameMap {
        "kul-article": HTMLKulArticleElement;
        "kul-badge": HTMLKulBadgeElement;
        "kul-button": HTMLKulButtonElement;
        "kul-card": HTMLKulCardElement;
        "kul-code": HTMLKulCodeElement;
        "kul-image": HTMLKulImageElement;
        "kul-showcase": HTMLKulShowcaseElement;
        "kul-showcase-article": HTMLKulShowcaseArticleElement;
        "kul-showcase-badge": HTMLKulShowcaseBadgeElement;
        "kul-showcase-button": HTMLKulShowcaseButtonElement;
        "kul-showcase-card": HTMLKulShowcaseCardElement;
        "kul-showcase-code": HTMLKulShowcaseCodeElement;
        "kul-showcase-debug": HTMLKulShowcaseDebugElement;
        "kul-showcase-image": HTMLKulShowcaseImageElement;
        "kul-showcase-kulmanager": HTMLKulShowcaseKulmanagerElement;
        "kul-showcase-probe": HTMLKulShowcaseProbeElement;
        "kul-showcase-spinner": HTMLKulShowcaseSpinnerElement;
        "kul-showcase-splash": HTMLKulShowcaseSplashElement;
        "kul-showcase-toast": HTMLKulShowcaseToastElement;
        "kul-showcase-upload": HTMLKulShowcaseUploadElement;
        "kul-spinner": HTMLKulSpinnerElement;
        "kul-splash": HTMLKulSplashElement;
        "kul-toast": HTMLKulToastElement;
        "kul-upload": HTMLKulUploadElement;
    }
}
declare namespace LocalJSX {
    interface KulArticle {
        /**
          * The actual data of the article.
          * @default null
         */
        "kulData"?: KulArticleDataset;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-article-event"?: (event: KulArticleCustomEvent<KulEventPayload>) => void;
    }
    interface KulBadge {
        /**
          * The props of the image displayed inside the badge.
          * @default null
         */
        "kulImageProps"?: KulImagePropsInterface;
        /**
          * The text displayed inside the badge.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-badge-event"?: (event: KulBadgeCustomEvent<KulEventPayload>) => void;
    }
    interface KulButton {
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "kulDisabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default ""
         */
        "kulIcon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default ""
         */
        "kulIconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default ""
         */
        "kulLabel"?: string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * When set to true, the button show a spinner received in slot.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the style of the button. This property controls the visual appearance of the button.
          * @default "raised"
          * @see KulButtonStyling - For a list of available styles.
         */
        "kulStyling"?: KulButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "kulToggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "kulTrailingIcon"?: boolean;
        /**
          * Sets the type of the button.
          * @default "button"
         */
        "kulType"?: | 'button'
        | 'reset'
        | 'submit';
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "kulValue"?: boolean;
        /**
          * Describes event emitted for various button interactions like click, focus, blur.
         */
        "onKul-button-event"?: (event: KulButtonCustomEvent<KulButtonEventPayload>) => void;
    }
    interface KulCard {
        /**
          * The actual data of the card.
          * @default null
         */
        "kulData"?: KulDataDataset;
        /**
          * Sets the layout.
          * @default "a"
         */
        "kulLayout"?: string;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "kulSizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "kulSizeY"?: string;
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Triggered when an event is fired.
         */
        "onKul-card-event"?: (event: KulCardCustomEvent<KulEventPayload>) => void;
    }
    interface KulCode {
        /**
          * Sets the language of the snippet.
          * @default "javascript"
         */
        "kulLanguage"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * String containing the snippet of code to display.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-code-event"?: (event: KulCodeCustomEvent<KulEventPayload>) => void;
    }
    interface KulImage {
        /**
          * This property is used to attach a badge to the component.
          * @default null
         */
        "kulBadgeProps"?: KulBadgePropsInterface;
        /**
          * Specifies the color of the icon using a CSS variable. This property is used to set the color of the component's icon.
          * @default KulThemeColorValues.ICON
          * @see KulThemeColorValues - For a list of available CSS variable names for color.
         */
        "kulColor"?: string;
        /**
          * Controls the display of a loading indicator. When enabled, a spinner is shown until the image finishes loading. This property is not compatible with SVG images.
          * @default false
         */
        "kulShowSpinner"?: boolean;
        /**
          * Sets the width of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeX"?: string;
        /**
          * Sets the height of the icon. This property accepts any valid CSS measurement value (e.g., px, %, vh, etc.) and defaults to 100%.
          * @default '100%'
         */
        "kulSizeY"?: string;
        /**
          * Customizes the style of the component. This property allows you to apply a custom CSS style to the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Defines the source URL of the image. This property is used to set the image resource that the component should display.
          * @default ""
         */
        "kulValue"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-image-event"?: (event: KulImageCustomEvent<KulEventPayload>) => void;
    }
    interface KulShowcase {
        /**
          * Custom style of the component.
          * @default ""
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-showcase-event"?: (event: KulShowcaseCustomEvent<KulEventPayload>) => void;
    }
    interface KulShowcaseArticle {
    }
    interface KulShowcaseBadge {
    }
    interface KulShowcaseButton {
    }
    interface KulShowcaseCard {
    }
    interface KulShowcaseCode {
    }
    interface KulShowcaseDebug {
    }
    interface KulShowcaseImage {
    }
    interface KulShowcaseKulmanager {
    }
    interface KulShowcaseProbe {
    }
    interface KulShowcaseSpinner {
    }
    interface KulShowcaseSplash {
    }
    interface KulShowcaseToast {
    }
    interface KulShowcaseUpload {
    }
    interface KulSpinner {
        /**
          * Specifies if the spinner is animating.
          * @default false
         */
        "kulActive"?: boolean;
        /**
          * Controls if the component displays as a bar or a spinner.
          * @default false
         */
        "kulBarVariant"?: boolean;
        /**
          * Defines the width and height of the spinner. In the bar variant, it specifies only the height.
          * @default ""
         */
        "kulDimensions"?: string;
        /**
          * Applies a blending modal over the component to darken or lighten the view, based on the theme.
          * @default false
         */
        "kulFader"?: boolean;
        /**
          * Duration needed for the fader to become active.
          * @default 3500
         */
        "kulFaderTimeout"?: number;
        /**
          * Fills the entire viewport when enabled.
          * @default false
         */
        "kulFullScreen"?: boolean;
        /**
          * Selects the spinner layout.
          * @default 1
         */
        "kulLayout"?: number;
        /**
          * Sets a custom style for the component.
          * @default ""
         */
        "kulStyle"?: string;
        "onKul-spinner-event"?: (event: KulSpinnerCustomEvent<KulEventPayload>) => void;
    }
    interface KulSplash {
        /**
          * Initial text displayed within the component, typically shown during loading.
          * @default "Loading..." - Indicates that loading or initialization is in progress.
         */
        "kulLabel"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Describes event emitted.
         */
        "onKul-splash-event"?: (event: KulSplashCustomEvent<KulEventPayload>) => void;
    }
    interface KulToast {
        /**
          * Callback invoked when the toast is closed.
          * @default () => void
         */
        "kulCloseCallback"?: () => void;
        /**
          * Sets the props of the clickable icon used to close the toast.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'clear' }
         */
        "kulCloseIcon"?: KulImagePropsInterface;
        /**
          * Sets the props of an optional icon that will be displayed along with the message.
          * @default { kulSizeX: '18px', kulSizeY: '18px', kulValue: 'info' }
         */
        "kulIcon"?: KulImagePropsInterface;
        /**
          * Sets the message of the toast.
          * @default 'Wow, such empty.'
         */
        "kulMessage"?: string;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * When kulTimer is set with a number, the toast will close itself after the specified amount of time (in ms).
          * @default ''
         */
        "kulTimer"?: number;
        /**
          * Describes event emitted.
         */
        "onKul-toast-event"?: (event: KulToastCustomEvent<KulEventPayload>) => void;
    }
    interface KulUpload {
        /**
          * Sets the button's label.
          * @default "Upload files..."
         */
        "kulLabel"?: string;
        /**
          * When set to true, the pointerdown event will trigger a ripple effect.
          * @default true
         */
        "kulRipple"?: boolean;
        /**
          * Enables customization of the component's style.
          * @default "" - No custom style applied by default.
         */
        "kulStyle"?: string;
        /**
          * Initializes the component with these files.
          * @default null
         */
        "kulValue"?: any;
        /**
          * Describes event emitted.
         */
        "onKul-upload-event"?: (event: KulUploadCustomEvent<KulUploadEventPayload>) => void;
    }
    interface IntrinsicElements {
        "kul-article": KulArticle;
        "kul-badge": KulBadge;
        "kul-button": KulButton;
        "kul-card": KulCard;
        "kul-code": KulCode;
        "kul-image": KulImage;
        "kul-showcase": KulShowcase;
        "kul-showcase-article": KulShowcaseArticle;
        "kul-showcase-badge": KulShowcaseBadge;
        "kul-showcase-button": KulShowcaseButton;
        "kul-showcase-card": KulShowcaseCard;
        "kul-showcase-code": KulShowcaseCode;
        "kul-showcase-debug": KulShowcaseDebug;
        "kul-showcase-image": KulShowcaseImage;
        "kul-showcase-kulmanager": KulShowcaseKulmanager;
        "kul-showcase-probe": KulShowcaseProbe;
        "kul-showcase-spinner": KulShowcaseSpinner;
        "kul-showcase-splash": KulShowcaseSplash;
        "kul-showcase-toast": KulShowcaseToast;
        "kul-showcase-upload": KulShowcaseUpload;
        "kul-spinner": KulSpinner;
        "kul-splash": KulSplash;
        "kul-toast": KulToast;
        "kul-upload": KulUpload;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kul-article": LocalJSX.KulArticle & JSXBase.HTMLAttributes<HTMLKulArticleElement>;
            "kul-badge": LocalJSX.KulBadge & JSXBase.HTMLAttributes<HTMLKulBadgeElement>;
            "kul-button": LocalJSX.KulButton & JSXBase.HTMLAttributes<HTMLKulButtonElement>;
            "kul-card": LocalJSX.KulCard & JSXBase.HTMLAttributes<HTMLKulCardElement>;
            "kul-code": LocalJSX.KulCode & JSXBase.HTMLAttributes<HTMLKulCodeElement>;
            "kul-image": LocalJSX.KulImage & JSXBase.HTMLAttributes<HTMLKulImageElement>;
            "kul-showcase": LocalJSX.KulShowcase & JSXBase.HTMLAttributes<HTMLKulShowcaseElement>;
            "kul-showcase-article": LocalJSX.KulShowcaseArticle & JSXBase.HTMLAttributes<HTMLKulShowcaseArticleElement>;
            "kul-showcase-badge": LocalJSX.KulShowcaseBadge & JSXBase.HTMLAttributes<HTMLKulShowcaseBadgeElement>;
            "kul-showcase-button": LocalJSX.KulShowcaseButton & JSXBase.HTMLAttributes<HTMLKulShowcaseButtonElement>;
            "kul-showcase-card": LocalJSX.KulShowcaseCard & JSXBase.HTMLAttributes<HTMLKulShowcaseCardElement>;
            "kul-showcase-code": LocalJSX.KulShowcaseCode & JSXBase.HTMLAttributes<HTMLKulShowcaseCodeElement>;
            "kul-showcase-debug": LocalJSX.KulShowcaseDebug & JSXBase.HTMLAttributes<HTMLKulShowcaseDebugElement>;
            "kul-showcase-image": LocalJSX.KulShowcaseImage & JSXBase.HTMLAttributes<HTMLKulShowcaseImageElement>;
            "kul-showcase-kulmanager": LocalJSX.KulShowcaseKulmanager & JSXBase.HTMLAttributes<HTMLKulShowcaseKulmanagerElement>;
            "kul-showcase-probe": LocalJSX.KulShowcaseProbe & JSXBase.HTMLAttributes<HTMLKulShowcaseProbeElement>;
            "kul-showcase-spinner": LocalJSX.KulShowcaseSpinner & JSXBase.HTMLAttributes<HTMLKulShowcaseSpinnerElement>;
            "kul-showcase-splash": LocalJSX.KulShowcaseSplash & JSXBase.HTMLAttributes<HTMLKulShowcaseSplashElement>;
            "kul-showcase-toast": LocalJSX.KulShowcaseToast & JSXBase.HTMLAttributes<HTMLKulShowcaseToastElement>;
            "kul-showcase-upload": LocalJSX.KulShowcaseUpload & JSXBase.HTMLAttributes<HTMLKulShowcaseUploadElement>;
            "kul-spinner": LocalJSX.KulSpinner & JSXBase.HTMLAttributes<HTMLKulSpinnerElement>;
            "kul-splash": LocalJSX.KulSplash & JSXBase.HTMLAttributes<HTMLKulSplashElement>;
            "kul-toast": LocalJSX.KulToast & JSXBase.HTMLAttributes<HTMLKulToastElement>;
            "kul-upload": LocalJSX.KulUpload & JSXBase.HTMLAttributes<HTMLKulUploadElement>;
        }
    }
}
