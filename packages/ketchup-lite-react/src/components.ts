'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type KulAccordionCustomEvent, type KulAccordionEventPayload, type KulArticleCustomEvent, type KulArticleEventPayload, type KulBadgeCustomEvent, type KulBadgeEventPayload, type KulButtonCustomEvent, type KulButtonEventPayload, type KulCardCustomEvent, type KulCardEventPayload, type KulCarouselCustomEvent, type KulCarouselEventPayload, type KulChartCustomEvent, type KulChartEventPayload, type KulChatCustomEvent, type KulChatEventPayload, type KulChipCustomEvent, type KulChipEventPayload, type KulCodeCustomEvent, type KulCodeEventPayload, type KulCompareCustomEvent, type KulCompareEventPayload, type KulDrawerCustomEvent, type KulDrawerEventPayload, type KulHeaderCustomEvent, type KulHeaderEventPayload, type KulImageCustomEvent, type KulImageEventPayload, type KulLazyCustomEvent, type KulLazyEventPayload, type KulListCustomEvent, type KulListEventPayload, type KulMasonryCustomEvent, type KulMasonryEventPayload, type KulMessengerCustomEvent, type KulMessengerEventPayload, type KulPhotoframeCustomEvent, type KulPhotoframeEventPayload, type KulProgressbarCustomEvent, type KulProgressbarEventPayload, type KulSliderCustomEvent, type KulSliderEventPayload, type KulSpinnerCustomEvent, type KulSpinnerEventPayload, type KulSplashCustomEvent, type KulSplashEventPayload, type KulSwitchCustomEvent, type KulSwitchEventPayload, type KulTabbarCustomEvent, type KulTabbarEventPayload, type KulTextfieldCustomEvent, type KulTextfieldEventPayload, type KulToastCustomEvent, type KulToastEventPayload, type KulTreeCustomEvent, type KulTreeEventPayload, type KulTypewriterCustomEvent, type KulTypewriterEventPayload, type KulUploadCustomEvent, type KulUploadEventPayload } from "ketchup-lite";
import { KulAccordion as KulAccordionElement, defineCustomElement as defineKulAccordion } from "ketchup-lite/dist/components/kul-accordion.js";
import { KulArticle as KulArticleElement, defineCustomElement as defineKulArticle } from "ketchup-lite/dist/components/kul-article.js";
import { KulBadge as KulBadgeElement, defineCustomElement as defineKulBadge } from "ketchup-lite/dist/components/kul-badge.js";
import { KulButton as KulButtonElement, defineCustomElement as defineKulButton } from "ketchup-lite/dist/components/kul-button.js";
import { KulCard as KulCardElement, defineCustomElement as defineKulCard } from "ketchup-lite/dist/components/kul-card.js";
import { KulCarousel as KulCarouselElement, defineCustomElement as defineKulCarousel } from "ketchup-lite/dist/components/kul-carousel.js";
import { KulChart as KulChartElement, defineCustomElement as defineKulChart } from "ketchup-lite/dist/components/kul-chart.js";
import { KulChat as KulChatElement, defineCustomElement as defineKulChat } from "ketchup-lite/dist/components/kul-chat.js";
import { KulChip as KulChipElement, defineCustomElement as defineKulChip } from "ketchup-lite/dist/components/kul-chip.js";
import { KulCode as KulCodeElement, defineCustomElement as defineKulCode } from "ketchup-lite/dist/components/kul-code.js";
import { KulCompare as KulCompareElement, defineCustomElement as defineKulCompare } from "ketchup-lite/dist/components/kul-compare.js";
import { KulDrawer as KulDrawerElement, defineCustomElement as defineKulDrawer } from "ketchup-lite/dist/components/kul-drawer.js";
import { KulHeader as KulHeaderElement, defineCustomElement as defineKulHeader } from "ketchup-lite/dist/components/kul-header.js";
import { KulImage as KulImageElement, defineCustomElement as defineKulImage } from "ketchup-lite/dist/components/kul-image.js";
import { KulLazy as KulLazyElement, defineCustomElement as defineKulLazy } from "ketchup-lite/dist/components/kul-lazy.js";
import { KulList as KulListElement, defineCustomElement as defineKulList } from "ketchup-lite/dist/components/kul-list.js";
import { KulMasonry as KulMasonryElement, defineCustomElement as defineKulMasonry } from "ketchup-lite/dist/components/kul-masonry.js";
import { KulMessenger as KulMessengerElement, defineCustomElement as defineKulMessenger } from "ketchup-lite/dist/components/kul-messenger.js";
import { KulPhotoframe as KulPhotoframeElement, defineCustomElement as defineKulPhotoframe } from "ketchup-lite/dist/components/kul-photoframe.js";
import { KulProgressbar as KulProgressbarElement, defineCustomElement as defineKulProgressbar } from "ketchup-lite/dist/components/kul-progressbar.js";
import { KulShowcaseAccordion as KulShowcaseAccordionElement, defineCustomElement as defineKulShowcaseAccordion } from "ketchup-lite/dist/components/kul-showcase-accordion.js";
import { KulShowcaseArticle as KulShowcaseArticleElement, defineCustomElement as defineKulShowcaseArticle } from "ketchup-lite/dist/components/kul-showcase-article.js";
import { KulShowcaseBadge as KulShowcaseBadgeElement, defineCustomElement as defineKulShowcaseBadge } from "ketchup-lite/dist/components/kul-showcase-badge.js";
import { KulShowcaseButton as KulShowcaseButtonElement, defineCustomElement as defineKulShowcaseButton } from "ketchup-lite/dist/components/kul-showcase-button.js";
import { KulShowcaseCard as KulShowcaseCardElement, defineCustomElement as defineKulShowcaseCard } from "ketchup-lite/dist/components/kul-showcase-card.js";
import { KulShowcaseCarousel as KulShowcaseCarouselElement, defineCustomElement as defineKulShowcaseCarousel } from "ketchup-lite/dist/components/kul-showcase-carousel.js";
import { KulShowcaseChart as KulShowcaseChartElement, defineCustomElement as defineKulShowcaseChart } from "ketchup-lite/dist/components/kul-showcase-chart.js";
import { KulShowcaseChat as KulShowcaseChatElement, defineCustomElement as defineKulShowcaseChat } from "ketchup-lite/dist/components/kul-showcase-chat.js";
import { KulShowcaseChip as KulShowcaseChipElement, defineCustomElement as defineKulShowcaseChip } from "ketchup-lite/dist/components/kul-showcase-chip.js";
import { KulShowcaseCode as KulShowcaseCodeElement, defineCustomElement as defineKulShowcaseCode } from "ketchup-lite/dist/components/kul-showcase-code.js";
import { KulShowcaseCompare as KulShowcaseCompareElement, defineCustomElement as defineKulShowcaseCompare } from "ketchup-lite/dist/components/kul-showcase-compare.js";
import { KulShowcaseDebug as KulShowcaseDebugElement, defineCustomElement as defineKulShowcaseDebug } from "ketchup-lite/dist/components/kul-showcase-debug.js";
import { KulShowcaseDrawer as KulShowcaseDrawerElement, defineCustomElement as defineKulShowcaseDrawer } from "ketchup-lite/dist/components/kul-showcase-drawer.js";
import { KulShowcaseHeader as KulShowcaseHeaderElement, defineCustomElement as defineKulShowcaseHeader } from "ketchup-lite/dist/components/kul-showcase-header.js";
import { KulShowcaseImage as KulShowcaseImageElement, defineCustomElement as defineKulShowcaseImage } from "ketchup-lite/dist/components/kul-showcase-image.js";
import { KulShowcaseKuldata as KulShowcaseKuldataElement, defineCustomElement as defineKulShowcaseKuldata } from "ketchup-lite/dist/components/kul-showcase-kuldata.js";
import { KulShowcaseKuldates as KulShowcaseKuldatesElement, defineCustomElement as defineKulShowcaseKuldates } from "ketchup-lite/dist/components/kul-showcase-kuldates.js";
import { KulShowcaseKuldebug as KulShowcaseKuldebugElement, defineCustomElement as defineKulShowcaseKuldebug } from "ketchup-lite/dist/components/kul-showcase-kuldebug.js";
import { KulShowcaseKuldynamicposition as KulShowcaseKuldynamicpositionElement, defineCustomElement as defineKulShowcaseKuldynamicposition } from "ketchup-lite/dist/components/kul-showcase-kuldynamicposition.js";
import { KulShowcaseKullanguage as KulShowcaseKullanguageElement, defineCustomElement as defineKulShowcaseKullanguage } from "ketchup-lite/dist/components/kul-showcase-kullanguage.js";
import { KulShowcaseKulllm as KulShowcaseKulllmElement, defineCustomElement as defineKulShowcaseKulllm } from "ketchup-lite/dist/components/kul-showcase-kulllm.js";
import { KulShowcaseKulmanager as KulShowcaseKulmanagerElement, defineCustomElement as defineKulShowcaseKulmanager } from "ketchup-lite/dist/components/kul-showcase-kulmanager.js";
import { KulShowcaseKulscrollonhover as KulShowcaseKulscrollonhoverElement, defineCustomElement as defineKulShowcaseKulscrollonhover } from "ketchup-lite/dist/components/kul-showcase-kulscrollonhover.js";
import { KulShowcaseKultheme as KulShowcaseKulthemeElement, defineCustomElement as defineKulShowcaseKultheme } from "ketchup-lite/dist/components/kul-showcase-kultheme.js";
import { KulShowcaseLazy as KulShowcaseLazyElement, defineCustomElement as defineKulShowcaseLazy } from "ketchup-lite/dist/components/kul-showcase-lazy.js";
import { KulShowcaseList as KulShowcaseListElement, defineCustomElement as defineKulShowcaseList } from "ketchup-lite/dist/components/kul-showcase-list.js";
import { KulShowcaseMasonry as KulShowcaseMasonryElement, defineCustomElement as defineKulShowcaseMasonry } from "ketchup-lite/dist/components/kul-showcase-masonry.js";
import { KulShowcaseMessenger as KulShowcaseMessengerElement, defineCustomElement as defineKulShowcaseMessenger } from "ketchup-lite/dist/components/kul-showcase-messenger.js";
import { KulShowcasePhotoframe as KulShowcasePhotoframeElement, defineCustomElement as defineKulShowcasePhotoframe } from "ketchup-lite/dist/components/kul-showcase-photoframe.js";
import { KulShowcaseProgressbar as KulShowcaseProgressbarElement, defineCustomElement as defineKulShowcaseProgressbar } from "ketchup-lite/dist/components/kul-showcase-progressbar.js";
import { KulShowcaseSlider as KulShowcaseSliderElement, defineCustomElement as defineKulShowcaseSlider } from "ketchup-lite/dist/components/kul-showcase-slider.js";
import { KulShowcaseSpinner as KulShowcaseSpinnerElement, defineCustomElement as defineKulShowcaseSpinner } from "ketchup-lite/dist/components/kul-showcase-spinner.js";
import { KulShowcaseSplash as KulShowcaseSplashElement, defineCustomElement as defineKulShowcaseSplash } from "ketchup-lite/dist/components/kul-showcase-splash.js";
import { KulShowcaseSwitch as KulShowcaseSwitchElement, defineCustomElement as defineKulShowcaseSwitch } from "ketchup-lite/dist/components/kul-showcase-switch.js";
import { KulShowcaseTabbar as KulShowcaseTabbarElement, defineCustomElement as defineKulShowcaseTabbar } from "ketchup-lite/dist/components/kul-showcase-tabbar.js";
import { KulShowcaseTextfield as KulShowcaseTextfieldElement, defineCustomElement as defineKulShowcaseTextfield } from "ketchup-lite/dist/components/kul-showcase-textfield.js";
import { KulShowcaseToast as KulShowcaseToastElement, defineCustomElement as defineKulShowcaseToast } from "ketchup-lite/dist/components/kul-showcase-toast.js";
import { KulShowcaseTree as KulShowcaseTreeElement, defineCustomElement as defineKulShowcaseTree } from "ketchup-lite/dist/components/kul-showcase-tree.js";
import { KulShowcaseTypewriter as KulShowcaseTypewriterElement, defineCustomElement as defineKulShowcaseTypewriter } from "ketchup-lite/dist/components/kul-showcase-typewriter.js";
import { KulShowcaseUpload as KulShowcaseUploadElement, defineCustomElement as defineKulShowcaseUpload } from "ketchup-lite/dist/components/kul-showcase-upload.js";
import { KulShowcase as KulShowcaseElement, defineCustomElement as defineKulShowcase } from "ketchup-lite/dist/components/kul-showcase.js";
import { KulSlider as KulSliderElement, defineCustomElement as defineKulSlider } from "ketchup-lite/dist/components/kul-slider.js";
import { KulSpinner as KulSpinnerElement, defineCustomElement as defineKulSpinner } from "ketchup-lite/dist/components/kul-spinner.js";
import { KulSplash as KulSplashElement, defineCustomElement as defineKulSplash } from "ketchup-lite/dist/components/kul-splash.js";
import { KulSwitch as KulSwitchElement, defineCustomElement as defineKulSwitch } from "ketchup-lite/dist/components/kul-switch.js";
import { KulTabbar as KulTabbarElement, defineCustomElement as defineKulTabbar } from "ketchup-lite/dist/components/kul-tabbar.js";
import { KulTextfield as KulTextfieldElement, defineCustomElement as defineKulTextfield } from "ketchup-lite/dist/components/kul-textfield.js";
import { KulToast as KulToastElement, defineCustomElement as defineKulToast } from "ketchup-lite/dist/components/kul-toast.js";
import { KulTree as KulTreeElement, defineCustomElement as defineKulTree } from "ketchup-lite/dist/components/kul-tree.js";
import { KulTypewriter as KulTypewriterElement, defineCustomElement as defineKulTypewriter } from "ketchup-lite/dist/components/kul-typewriter.js";
import { KulUpload as KulUploadElement, defineCustomElement as defineKulUpload } from "ketchup-lite/dist/components/kul-upload.js";
import React from 'react';

type KulAccordionEvents = { onKulAccordionEvent: EventName<KulAccordionCustomEvent<KulAccordionEventPayload>> };

export const KulAccordion: StencilReactComponent<KulAccordionElement, KulAccordionEvents> = /*@__PURE__*/ createComponent<KulAccordionElement, KulAccordionEvents>({
    tagName: 'kul-accordion',
    elementClass: KulAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulAccordionEvent: 'kul-accordion-event' } as KulAccordionEvents,
    defineCustomElement: defineKulAccordion
});

type KulArticleEvents = { onKulArticleEvent: EventName<KulArticleCustomEvent<KulArticleEventPayload>> };

export const KulArticle: StencilReactComponent<KulArticleElement, KulArticleEvents> = /*@__PURE__*/ createComponent<KulArticleElement, KulArticleEvents>({
    tagName: 'kul-article',
    elementClass: KulArticleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulArticleEvent: 'kul-article-event' } as KulArticleEvents,
    defineCustomElement: defineKulArticle
});

type KulBadgeEvents = { onKulBadgeEvent: EventName<KulBadgeCustomEvent<KulBadgeEventPayload>> };

export const KulBadge: StencilReactComponent<KulBadgeElement, KulBadgeEvents> = /*@__PURE__*/ createComponent<KulBadgeElement, KulBadgeEvents>({
    tagName: 'kul-badge',
    elementClass: KulBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulBadgeEvent: 'kul-badge-event' } as KulBadgeEvents,
    defineCustomElement: defineKulBadge
});

type KulButtonEvents = { onKulButtonEvent: EventName<KulButtonCustomEvent<KulButtonEventPayload>> };

export const KulButton: StencilReactComponent<KulButtonElement, KulButtonEvents> = /*@__PURE__*/ createComponent<KulButtonElement, KulButtonEvents>({
    tagName: 'kul-button',
    elementClass: KulButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulButtonEvent: 'kul-button-event' } as KulButtonEvents,
    defineCustomElement: defineKulButton
});

type KulCardEvents = { onKulCardEvent: EventName<KulCardCustomEvent<KulCardEventPayload>> };

export const KulCard: StencilReactComponent<KulCardElement, KulCardEvents> = /*@__PURE__*/ createComponent<KulCardElement, KulCardEvents>({
    tagName: 'kul-card',
    elementClass: KulCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulCardEvent: 'kul-card-event' } as KulCardEvents,
    defineCustomElement: defineKulCard
});

type KulCarouselEvents = { onKulCarouselEvent: EventName<KulCarouselCustomEvent<KulCarouselEventPayload>> };

export const KulCarousel: StencilReactComponent<KulCarouselElement, KulCarouselEvents> = /*@__PURE__*/ createComponent<KulCarouselElement, KulCarouselEvents>({
    tagName: 'kul-carousel',
    elementClass: KulCarouselElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulCarouselEvent: 'kul-carousel-event' } as KulCarouselEvents,
    defineCustomElement: defineKulCarousel
});

type KulChartEvents = { onKulChartEvent: EventName<KulChartCustomEvent<KulChartEventPayload>> };

export const KulChart: StencilReactComponent<KulChartElement, KulChartEvents> = /*@__PURE__*/ createComponent<KulChartElement, KulChartEvents>({
    tagName: 'kul-chart',
    elementClass: KulChartElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulChartEvent: 'kul-chart-event' } as KulChartEvents,
    defineCustomElement: defineKulChart
});

type KulChatEvents = { onKulChatEvent: EventName<KulChatCustomEvent<KulChatEventPayload>> };

export const KulChat: StencilReactComponent<KulChatElement, KulChatEvents> = /*@__PURE__*/ createComponent<KulChatElement, KulChatEvents>({
    tagName: 'kul-chat',
    elementClass: KulChatElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulChatEvent: 'kul-chat-event' } as KulChatEvents,
    defineCustomElement: defineKulChat
});

type KulChipEvents = { onKulChipEvent: EventName<KulChipCustomEvent<KulChipEventPayload>> };

export const KulChip: StencilReactComponent<KulChipElement, KulChipEvents> = /*@__PURE__*/ createComponent<KulChipElement, KulChipEvents>({
    tagName: 'kul-chip',
    elementClass: KulChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulChipEvent: 'kul-chip-event' } as KulChipEvents,
    defineCustomElement: defineKulChip
});

type KulCodeEvents = { onKulCodeEvent: EventName<KulCodeCustomEvent<KulCodeEventPayload>> };

export const KulCode: StencilReactComponent<KulCodeElement, KulCodeEvents> = /*@__PURE__*/ createComponent<KulCodeElement, KulCodeEvents>({
    tagName: 'kul-code',
    elementClass: KulCodeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulCodeEvent: 'kul-code-event' } as KulCodeEvents,
    defineCustomElement: defineKulCode
});

type KulCompareEvents = { onKulCompareEvent: EventName<KulCompareCustomEvent<KulCompareEventPayload>> };

export const KulCompare: StencilReactComponent<KulCompareElement, KulCompareEvents> = /*@__PURE__*/ createComponent<KulCompareElement, KulCompareEvents>({
    tagName: 'kul-compare',
    elementClass: KulCompareElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulCompareEvent: 'kul-compare-event' } as KulCompareEvents,
    defineCustomElement: defineKulCompare
});

type KulDrawerEvents = { onKulDrawerEvent: EventName<KulDrawerCustomEvent<KulDrawerEventPayload>> };

export const KulDrawer: StencilReactComponent<KulDrawerElement, KulDrawerEvents> = /*@__PURE__*/ createComponent<KulDrawerElement, KulDrawerEvents>({
    tagName: 'kul-drawer',
    elementClass: KulDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulDrawerEvent: 'kul-drawer-event' } as KulDrawerEvents,
    defineCustomElement: defineKulDrawer
});

type KulHeaderEvents = { onKulHeaderEvent: EventName<KulHeaderCustomEvent<KulHeaderEventPayload>> };

export const KulHeader: StencilReactComponent<KulHeaderElement, KulHeaderEvents> = /*@__PURE__*/ createComponent<KulHeaderElement, KulHeaderEvents>({
    tagName: 'kul-header',
    elementClass: KulHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulHeaderEvent: 'kul-header-event' } as KulHeaderEvents,
    defineCustomElement: defineKulHeader
});

type KulImageEvents = { onKulImageEvent: EventName<KulImageCustomEvent<KulImageEventPayload>> };

export const KulImage: StencilReactComponent<KulImageElement, KulImageEvents> = /*@__PURE__*/ createComponent<KulImageElement, KulImageEvents>({
    tagName: 'kul-image',
    elementClass: KulImageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulImageEvent: 'kul-image-event' } as KulImageEvents,
    defineCustomElement: defineKulImage
});

type KulLazyEvents = { onKulLazyEvent: EventName<KulLazyCustomEvent<KulLazyEventPayload>> };

export const KulLazy: StencilReactComponent<KulLazyElement, KulLazyEvents> = /*@__PURE__*/ createComponent<KulLazyElement, KulLazyEvents>({
    tagName: 'kul-lazy',
    elementClass: KulLazyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulLazyEvent: 'kul-lazy-event' } as KulLazyEvents,
    defineCustomElement: defineKulLazy
});

type KulListEvents = { onKulListEvent: EventName<KulListCustomEvent<KulListEventPayload>> };

export const KulList: StencilReactComponent<KulListElement, KulListEvents> = /*@__PURE__*/ createComponent<KulListElement, KulListEvents>({
    tagName: 'kul-list',
    elementClass: KulListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulListEvent: 'kul-list-event' } as KulListEvents,
    defineCustomElement: defineKulList
});

type KulMasonryEvents = { onKulMasonryEvent: EventName<KulMasonryCustomEvent<KulMasonryEventPayload>> };

export const KulMasonry: StencilReactComponent<KulMasonryElement, KulMasonryEvents> = /*@__PURE__*/ createComponent<KulMasonryElement, KulMasonryEvents>({
    tagName: 'kul-masonry',
    elementClass: KulMasonryElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulMasonryEvent: 'kul-masonry-event' } as KulMasonryEvents,
    defineCustomElement: defineKulMasonry
});

type KulMessengerEvents = { onKulMessengerEvent: EventName<KulMessengerCustomEvent<KulMessengerEventPayload>> };

export const KulMessenger: StencilReactComponent<KulMessengerElement, KulMessengerEvents> = /*@__PURE__*/ createComponent<KulMessengerElement, KulMessengerEvents>({
    tagName: 'kul-messenger',
    elementClass: KulMessengerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulMessengerEvent: 'kul-messenger-event' } as KulMessengerEvents,
    defineCustomElement: defineKulMessenger
});

type KulPhotoframeEvents = { onKulPhotoframeEvent: EventName<KulPhotoframeCustomEvent<KulPhotoframeEventPayload>> };

export const KulPhotoframe: StencilReactComponent<KulPhotoframeElement, KulPhotoframeEvents> = /*@__PURE__*/ createComponent<KulPhotoframeElement, KulPhotoframeEvents>({
    tagName: 'kul-photoframe',
    elementClass: KulPhotoframeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulPhotoframeEvent: 'kul-photoframe-event' } as KulPhotoframeEvents,
    defineCustomElement: defineKulPhotoframe
});

type KulProgressbarEvents = { onKulProgressbarEvent: EventName<KulProgressbarCustomEvent<KulProgressbarEventPayload>> };

export const KulProgressbar: StencilReactComponent<KulProgressbarElement, KulProgressbarEvents> = /*@__PURE__*/ createComponent<KulProgressbarElement, KulProgressbarEvents>({
    tagName: 'kul-progressbar',
    elementClass: KulProgressbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulProgressbarEvent: 'kul-progressbar-event' } as KulProgressbarEvents,
    defineCustomElement: defineKulProgressbar
});

type KulShowcaseEvents = NonNullable<unknown>;

export const KulShowcase: StencilReactComponent<KulShowcaseElement, KulShowcaseEvents> = /*@__PURE__*/ createComponent<KulShowcaseElement, KulShowcaseEvents>({
    tagName: 'kul-showcase',
    elementClass: KulShowcaseElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseEvents,
    defineCustomElement: defineKulShowcase
});

type KulShowcaseAccordionEvents = NonNullable<unknown>;

export const KulShowcaseAccordion: StencilReactComponent<KulShowcaseAccordionElement, KulShowcaseAccordionEvents> = /*@__PURE__*/ createComponent<KulShowcaseAccordionElement, KulShowcaseAccordionEvents>({
    tagName: 'kul-showcase-accordion',
    elementClass: KulShowcaseAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseAccordionEvents,
    defineCustomElement: defineKulShowcaseAccordion
});

type KulShowcaseArticleEvents = NonNullable<unknown>;

export const KulShowcaseArticle: StencilReactComponent<KulShowcaseArticleElement, KulShowcaseArticleEvents> = /*@__PURE__*/ createComponent<KulShowcaseArticleElement, KulShowcaseArticleEvents>({
    tagName: 'kul-showcase-article',
    elementClass: KulShowcaseArticleElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseArticleEvents,
    defineCustomElement: defineKulShowcaseArticle
});

type KulShowcaseBadgeEvents = NonNullable<unknown>;

export const KulShowcaseBadge: StencilReactComponent<KulShowcaseBadgeElement, KulShowcaseBadgeEvents> = /*@__PURE__*/ createComponent<KulShowcaseBadgeElement, KulShowcaseBadgeEvents>({
    tagName: 'kul-showcase-badge',
    elementClass: KulShowcaseBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseBadgeEvents,
    defineCustomElement: defineKulShowcaseBadge
});

type KulShowcaseButtonEvents = NonNullable<unknown>;

export const KulShowcaseButton: StencilReactComponent<KulShowcaseButtonElement, KulShowcaseButtonEvents> = /*@__PURE__*/ createComponent<KulShowcaseButtonElement, KulShowcaseButtonEvents>({
    tagName: 'kul-showcase-button',
    elementClass: KulShowcaseButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseButtonEvents,
    defineCustomElement: defineKulShowcaseButton
});

type KulShowcaseCardEvents = NonNullable<unknown>;

export const KulShowcaseCard: StencilReactComponent<KulShowcaseCardElement, KulShowcaseCardEvents> = /*@__PURE__*/ createComponent<KulShowcaseCardElement, KulShowcaseCardEvents>({
    tagName: 'kul-showcase-card',
    elementClass: KulShowcaseCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseCardEvents,
    defineCustomElement: defineKulShowcaseCard
});

type KulShowcaseCarouselEvents = NonNullable<unknown>;

export const KulShowcaseCarousel: StencilReactComponent<KulShowcaseCarouselElement, KulShowcaseCarouselEvents> = /*@__PURE__*/ createComponent<KulShowcaseCarouselElement, KulShowcaseCarouselEvents>({
    tagName: 'kul-showcase-carousel',
    elementClass: KulShowcaseCarouselElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseCarouselEvents,
    defineCustomElement: defineKulShowcaseCarousel
});

type KulShowcaseChartEvents = NonNullable<unknown>;

export const KulShowcaseChart: StencilReactComponent<KulShowcaseChartElement, KulShowcaseChartEvents> = /*@__PURE__*/ createComponent<KulShowcaseChartElement, KulShowcaseChartEvents>({
    tagName: 'kul-showcase-chart',
    elementClass: KulShowcaseChartElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseChartEvents,
    defineCustomElement: defineKulShowcaseChart
});

type KulShowcaseChatEvents = NonNullable<unknown>;

export const KulShowcaseChat: StencilReactComponent<KulShowcaseChatElement, KulShowcaseChatEvents> = /*@__PURE__*/ createComponent<KulShowcaseChatElement, KulShowcaseChatEvents>({
    tagName: 'kul-showcase-chat',
    elementClass: KulShowcaseChatElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseChatEvents,
    defineCustomElement: defineKulShowcaseChat
});

type KulShowcaseChipEvents = NonNullable<unknown>;

export const KulShowcaseChip: StencilReactComponent<KulShowcaseChipElement, KulShowcaseChipEvents> = /*@__PURE__*/ createComponent<KulShowcaseChipElement, KulShowcaseChipEvents>({
    tagName: 'kul-showcase-chip',
    elementClass: KulShowcaseChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseChipEvents,
    defineCustomElement: defineKulShowcaseChip
});

type KulShowcaseCodeEvents = NonNullable<unknown>;

export const KulShowcaseCode: StencilReactComponent<KulShowcaseCodeElement, KulShowcaseCodeEvents> = /*@__PURE__*/ createComponent<KulShowcaseCodeElement, KulShowcaseCodeEvents>({
    tagName: 'kul-showcase-code',
    elementClass: KulShowcaseCodeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseCodeEvents,
    defineCustomElement: defineKulShowcaseCode
});

type KulShowcaseCompareEvents = NonNullable<unknown>;

export const KulShowcaseCompare: StencilReactComponent<KulShowcaseCompareElement, KulShowcaseCompareEvents> = /*@__PURE__*/ createComponent<KulShowcaseCompareElement, KulShowcaseCompareEvents>({
    tagName: 'kul-showcase-compare',
    elementClass: KulShowcaseCompareElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseCompareEvents,
    defineCustomElement: defineKulShowcaseCompare
});

type KulShowcaseDebugEvents = NonNullable<unknown>;

export const KulShowcaseDebug: StencilReactComponent<KulShowcaseDebugElement, KulShowcaseDebugEvents> = /*@__PURE__*/ createComponent<KulShowcaseDebugElement, KulShowcaseDebugEvents>({
    tagName: 'kul-showcase-debug',
    elementClass: KulShowcaseDebugElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseDebugEvents,
    defineCustomElement: defineKulShowcaseDebug
});

type KulShowcaseDrawerEvents = NonNullable<unknown>;

export const KulShowcaseDrawer: StencilReactComponent<KulShowcaseDrawerElement, KulShowcaseDrawerEvents> = /*@__PURE__*/ createComponent<KulShowcaseDrawerElement, KulShowcaseDrawerEvents>({
    tagName: 'kul-showcase-drawer',
    elementClass: KulShowcaseDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseDrawerEvents,
    defineCustomElement: defineKulShowcaseDrawer
});

type KulShowcaseHeaderEvents = NonNullable<unknown>;

export const KulShowcaseHeader: StencilReactComponent<KulShowcaseHeaderElement, KulShowcaseHeaderEvents> = /*@__PURE__*/ createComponent<KulShowcaseHeaderElement, KulShowcaseHeaderEvents>({
    tagName: 'kul-showcase-header',
    elementClass: KulShowcaseHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseHeaderEvents,
    defineCustomElement: defineKulShowcaseHeader
});

type KulShowcaseImageEvents = NonNullable<unknown>;

export const KulShowcaseImage: StencilReactComponent<KulShowcaseImageElement, KulShowcaseImageEvents> = /*@__PURE__*/ createComponent<KulShowcaseImageElement, KulShowcaseImageEvents>({
    tagName: 'kul-showcase-image',
    elementClass: KulShowcaseImageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseImageEvents,
    defineCustomElement: defineKulShowcaseImage
});

type KulShowcaseKuldataEvents = NonNullable<unknown>;

export const KulShowcaseKuldata: StencilReactComponent<KulShowcaseKuldataElement, KulShowcaseKuldataEvents> = /*@__PURE__*/ createComponent<KulShowcaseKuldataElement, KulShowcaseKuldataEvents>({
    tagName: 'kul-showcase-kuldata',
    elementClass: KulShowcaseKuldataElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKuldataEvents,
    defineCustomElement: defineKulShowcaseKuldata
});

type KulShowcaseKuldatesEvents = NonNullable<unknown>;

export const KulShowcaseKuldates: StencilReactComponent<KulShowcaseKuldatesElement, KulShowcaseKuldatesEvents> = /*@__PURE__*/ createComponent<KulShowcaseKuldatesElement, KulShowcaseKuldatesEvents>({
    tagName: 'kul-showcase-kuldates',
    elementClass: KulShowcaseKuldatesElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKuldatesEvents,
    defineCustomElement: defineKulShowcaseKuldates
});

type KulShowcaseKuldebugEvents = NonNullable<unknown>;

export const KulShowcaseKuldebug: StencilReactComponent<KulShowcaseKuldebugElement, KulShowcaseKuldebugEvents> = /*@__PURE__*/ createComponent<KulShowcaseKuldebugElement, KulShowcaseKuldebugEvents>({
    tagName: 'kul-showcase-kuldebug',
    elementClass: KulShowcaseKuldebugElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKuldebugEvents,
    defineCustomElement: defineKulShowcaseKuldebug
});

type KulShowcaseKuldynamicpositionEvents = NonNullable<unknown>;

export const KulShowcaseKuldynamicposition: StencilReactComponent<KulShowcaseKuldynamicpositionElement, KulShowcaseKuldynamicpositionEvents> = /*@__PURE__*/ createComponent<KulShowcaseKuldynamicpositionElement, KulShowcaseKuldynamicpositionEvents>({
    tagName: 'kul-showcase-kuldynamicposition',
    elementClass: KulShowcaseKuldynamicpositionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKuldynamicpositionEvents,
    defineCustomElement: defineKulShowcaseKuldynamicposition
});

type KulShowcaseKullanguageEvents = NonNullable<unknown>;

export const KulShowcaseKullanguage: StencilReactComponent<KulShowcaseKullanguageElement, KulShowcaseKullanguageEvents> = /*@__PURE__*/ createComponent<KulShowcaseKullanguageElement, KulShowcaseKullanguageEvents>({
    tagName: 'kul-showcase-kullanguage',
    elementClass: KulShowcaseKullanguageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKullanguageEvents,
    defineCustomElement: defineKulShowcaseKullanguage
});

type KulShowcaseKulllmEvents = NonNullable<unknown>;

export const KulShowcaseKulllm: StencilReactComponent<KulShowcaseKulllmElement, KulShowcaseKulllmEvents> = /*@__PURE__*/ createComponent<KulShowcaseKulllmElement, KulShowcaseKulllmEvents>({
    tagName: 'kul-showcase-kulllm',
    elementClass: KulShowcaseKulllmElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKulllmEvents,
    defineCustomElement: defineKulShowcaseKulllm
});

type KulShowcaseKulmanagerEvents = NonNullable<unknown>;

export const KulShowcaseKulmanager: StencilReactComponent<KulShowcaseKulmanagerElement, KulShowcaseKulmanagerEvents> = /*@__PURE__*/ createComponent<KulShowcaseKulmanagerElement, KulShowcaseKulmanagerEvents>({
    tagName: 'kul-showcase-kulmanager',
    elementClass: KulShowcaseKulmanagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKulmanagerEvents,
    defineCustomElement: defineKulShowcaseKulmanager
});

type KulShowcaseKulscrollonhoverEvents = NonNullable<unknown>;

export const KulShowcaseKulscrollonhover: StencilReactComponent<KulShowcaseKulscrollonhoverElement, KulShowcaseKulscrollonhoverEvents> = /*@__PURE__*/ createComponent<KulShowcaseKulscrollonhoverElement, KulShowcaseKulscrollonhoverEvents>({
    tagName: 'kul-showcase-kulscrollonhover',
    elementClass: KulShowcaseKulscrollonhoverElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKulscrollonhoverEvents,
    defineCustomElement: defineKulShowcaseKulscrollonhover
});

type KulShowcaseKulthemeEvents = NonNullable<unknown>;

export const KulShowcaseKultheme: StencilReactComponent<KulShowcaseKulthemeElement, KulShowcaseKulthemeEvents> = /*@__PURE__*/ createComponent<KulShowcaseKulthemeElement, KulShowcaseKulthemeEvents>({
    tagName: 'kul-showcase-kultheme',
    elementClass: KulShowcaseKulthemeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseKulthemeEvents,
    defineCustomElement: defineKulShowcaseKultheme
});

type KulShowcaseLazyEvents = NonNullable<unknown>;

export const KulShowcaseLazy: StencilReactComponent<KulShowcaseLazyElement, KulShowcaseLazyEvents> = /*@__PURE__*/ createComponent<KulShowcaseLazyElement, KulShowcaseLazyEvents>({
    tagName: 'kul-showcase-lazy',
    elementClass: KulShowcaseLazyElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseLazyEvents,
    defineCustomElement: defineKulShowcaseLazy
});

type KulShowcaseListEvents = NonNullable<unknown>;

export const KulShowcaseList: StencilReactComponent<KulShowcaseListElement, KulShowcaseListEvents> = /*@__PURE__*/ createComponent<KulShowcaseListElement, KulShowcaseListEvents>({
    tagName: 'kul-showcase-list',
    elementClass: KulShowcaseListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseListEvents,
    defineCustomElement: defineKulShowcaseList
});

type KulShowcaseMasonryEvents = NonNullable<unknown>;

export const KulShowcaseMasonry: StencilReactComponent<KulShowcaseMasonryElement, KulShowcaseMasonryEvents> = /*@__PURE__*/ createComponent<KulShowcaseMasonryElement, KulShowcaseMasonryEvents>({
    tagName: 'kul-showcase-masonry',
    elementClass: KulShowcaseMasonryElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseMasonryEvents,
    defineCustomElement: defineKulShowcaseMasonry
});

type KulShowcaseMessengerEvents = NonNullable<unknown>;

export const KulShowcaseMessenger: StencilReactComponent<KulShowcaseMessengerElement, KulShowcaseMessengerEvents> = /*@__PURE__*/ createComponent<KulShowcaseMessengerElement, KulShowcaseMessengerEvents>({
    tagName: 'kul-showcase-messenger',
    elementClass: KulShowcaseMessengerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseMessengerEvents,
    defineCustomElement: defineKulShowcaseMessenger
});

type KulShowcasePhotoframeEvents = NonNullable<unknown>;

export const KulShowcasePhotoframe: StencilReactComponent<KulShowcasePhotoframeElement, KulShowcasePhotoframeEvents> = /*@__PURE__*/ createComponent<KulShowcasePhotoframeElement, KulShowcasePhotoframeEvents>({
    tagName: 'kul-showcase-photoframe',
    elementClass: KulShowcasePhotoframeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcasePhotoframeEvents,
    defineCustomElement: defineKulShowcasePhotoframe
});

type KulShowcaseProgressbarEvents = NonNullable<unknown>;

export const KulShowcaseProgressbar: StencilReactComponent<KulShowcaseProgressbarElement, KulShowcaseProgressbarEvents> = /*@__PURE__*/ createComponent<KulShowcaseProgressbarElement, KulShowcaseProgressbarEvents>({
    tagName: 'kul-showcase-progressbar',
    elementClass: KulShowcaseProgressbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseProgressbarEvents,
    defineCustomElement: defineKulShowcaseProgressbar
});

type KulShowcaseSliderEvents = NonNullable<unknown>;

export const KulShowcaseSlider: StencilReactComponent<KulShowcaseSliderElement, KulShowcaseSliderEvents> = /*@__PURE__*/ createComponent<KulShowcaseSliderElement, KulShowcaseSliderEvents>({
    tagName: 'kul-showcase-slider',
    elementClass: KulShowcaseSliderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseSliderEvents,
    defineCustomElement: defineKulShowcaseSlider
});

type KulShowcaseSpinnerEvents = NonNullable<unknown>;

export const KulShowcaseSpinner: StencilReactComponent<KulShowcaseSpinnerElement, KulShowcaseSpinnerEvents> = /*@__PURE__*/ createComponent<KulShowcaseSpinnerElement, KulShowcaseSpinnerEvents>({
    tagName: 'kul-showcase-spinner',
    elementClass: KulShowcaseSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseSpinnerEvents,
    defineCustomElement: defineKulShowcaseSpinner
});

type KulShowcaseSplashEvents = NonNullable<unknown>;

export const KulShowcaseSplash: StencilReactComponent<KulShowcaseSplashElement, KulShowcaseSplashEvents> = /*@__PURE__*/ createComponent<KulShowcaseSplashElement, KulShowcaseSplashEvents>({
    tagName: 'kul-showcase-splash',
    elementClass: KulShowcaseSplashElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseSplashEvents,
    defineCustomElement: defineKulShowcaseSplash
});

type KulShowcaseSwitchEvents = NonNullable<unknown>;

export const KulShowcaseSwitch: StencilReactComponent<KulShowcaseSwitchElement, KulShowcaseSwitchEvents> = /*@__PURE__*/ createComponent<KulShowcaseSwitchElement, KulShowcaseSwitchEvents>({
    tagName: 'kul-showcase-switch',
    elementClass: KulShowcaseSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseSwitchEvents,
    defineCustomElement: defineKulShowcaseSwitch
});

type KulShowcaseTabbarEvents = NonNullable<unknown>;

export const KulShowcaseTabbar: StencilReactComponent<KulShowcaseTabbarElement, KulShowcaseTabbarEvents> = /*@__PURE__*/ createComponent<KulShowcaseTabbarElement, KulShowcaseTabbarEvents>({
    tagName: 'kul-showcase-tabbar',
    elementClass: KulShowcaseTabbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseTabbarEvents,
    defineCustomElement: defineKulShowcaseTabbar
});

type KulShowcaseTextfieldEvents = NonNullable<unknown>;

export const KulShowcaseTextfield: StencilReactComponent<KulShowcaseTextfieldElement, KulShowcaseTextfieldEvents> = /*@__PURE__*/ createComponent<KulShowcaseTextfieldElement, KulShowcaseTextfieldEvents>({
    tagName: 'kul-showcase-textfield',
    elementClass: KulShowcaseTextfieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseTextfieldEvents,
    defineCustomElement: defineKulShowcaseTextfield
});

type KulShowcaseToastEvents = NonNullable<unknown>;

export const KulShowcaseToast: StencilReactComponent<KulShowcaseToastElement, KulShowcaseToastEvents> = /*@__PURE__*/ createComponent<KulShowcaseToastElement, KulShowcaseToastEvents>({
    tagName: 'kul-showcase-toast',
    elementClass: KulShowcaseToastElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseToastEvents,
    defineCustomElement: defineKulShowcaseToast
});

type KulShowcaseTreeEvents = NonNullable<unknown>;

export const KulShowcaseTree: StencilReactComponent<KulShowcaseTreeElement, KulShowcaseTreeEvents> = /*@__PURE__*/ createComponent<KulShowcaseTreeElement, KulShowcaseTreeEvents>({
    tagName: 'kul-showcase-tree',
    elementClass: KulShowcaseTreeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseTreeEvents,
    defineCustomElement: defineKulShowcaseTree
});

type KulShowcaseTypewriterEvents = NonNullable<unknown>;

export const KulShowcaseTypewriter: StencilReactComponent<KulShowcaseTypewriterElement, KulShowcaseTypewriterEvents> = /*@__PURE__*/ createComponent<KulShowcaseTypewriterElement, KulShowcaseTypewriterEvents>({
    tagName: 'kul-showcase-typewriter',
    elementClass: KulShowcaseTypewriterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseTypewriterEvents,
    defineCustomElement: defineKulShowcaseTypewriter
});

type KulShowcaseUploadEvents = NonNullable<unknown>;

export const KulShowcaseUpload: StencilReactComponent<KulShowcaseUploadElement, KulShowcaseUploadEvents> = /*@__PURE__*/ createComponent<KulShowcaseUploadElement, KulShowcaseUploadEvents>({
    tagName: 'kul-showcase-upload',
    elementClass: KulShowcaseUploadElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as KulShowcaseUploadEvents,
    defineCustomElement: defineKulShowcaseUpload
});

type KulSliderEvents = { onKulSliderEvent: EventName<KulSliderCustomEvent<KulSliderEventPayload>> };

export const KulSlider: StencilReactComponent<KulSliderElement, KulSliderEvents> = /*@__PURE__*/ createComponent<KulSliderElement, KulSliderEvents>({
    tagName: 'kul-slider',
    elementClass: KulSliderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulSliderEvent: 'kul-slider-event' } as KulSliderEvents,
    defineCustomElement: defineKulSlider
});

type KulSpinnerEvents = { onKulSpinnerEvent: EventName<KulSpinnerCustomEvent<KulSpinnerEventPayload>> };

export const KulSpinner: StencilReactComponent<KulSpinnerElement, KulSpinnerEvents> = /*@__PURE__*/ createComponent<KulSpinnerElement, KulSpinnerEvents>({
    tagName: 'kul-spinner',
    elementClass: KulSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulSpinnerEvent: 'kul-spinner-event' } as KulSpinnerEvents,
    defineCustomElement: defineKulSpinner
});

type KulSplashEvents = { onKulSplashEvent: EventName<KulSplashCustomEvent<KulSplashEventPayload>> };

export const KulSplash: StencilReactComponent<KulSplashElement, KulSplashEvents> = /*@__PURE__*/ createComponent<KulSplashElement, KulSplashEvents>({
    tagName: 'kul-splash',
    elementClass: KulSplashElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulSplashEvent: 'kul-splash-event' } as KulSplashEvents,
    defineCustomElement: defineKulSplash
});

type KulSwitchEvents = { onKulSwitchEvent: EventName<KulSwitchCustomEvent<KulSwitchEventPayload>> };

export const KulSwitch: StencilReactComponent<KulSwitchElement, KulSwitchEvents> = /*@__PURE__*/ createComponent<KulSwitchElement, KulSwitchEvents>({
    tagName: 'kul-switch',
    elementClass: KulSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulSwitchEvent: 'kul-switch-event' } as KulSwitchEvents,
    defineCustomElement: defineKulSwitch
});

type KulTabbarEvents = { onKulTabbarEvent: EventName<KulTabbarCustomEvent<KulTabbarEventPayload>> };

export const KulTabbar: StencilReactComponent<KulTabbarElement, KulTabbarEvents> = /*@__PURE__*/ createComponent<KulTabbarElement, KulTabbarEvents>({
    tagName: 'kul-tabbar',
    elementClass: KulTabbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulTabbarEvent: 'kul-tabbar-event' } as KulTabbarEvents,
    defineCustomElement: defineKulTabbar
});

type KulTextfieldEvents = { onKulTextfieldEvent: EventName<KulTextfieldCustomEvent<KulTextfieldEventPayload>> };

export const KulTextfield: StencilReactComponent<KulTextfieldElement, KulTextfieldEvents> = /*@__PURE__*/ createComponent<KulTextfieldElement, KulTextfieldEvents>({
    tagName: 'kul-textfield',
    elementClass: KulTextfieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulTextfieldEvent: 'kul-textfield-event' } as KulTextfieldEvents,
    defineCustomElement: defineKulTextfield
});

type KulToastEvents = { onKulToastEvent: EventName<KulToastCustomEvent<KulToastEventPayload>> };

export const KulToast: StencilReactComponent<KulToastElement, KulToastEvents> = /*@__PURE__*/ createComponent<KulToastElement, KulToastEvents>({
    tagName: 'kul-toast',
    elementClass: KulToastElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulToastEvent: 'kul-toast-event' } as KulToastEvents,
    defineCustomElement: defineKulToast
});

type KulTreeEvents = { onKulTreeEvent: EventName<KulTreeCustomEvent<KulTreeEventPayload>> };

export const KulTree: StencilReactComponent<KulTreeElement, KulTreeEvents> = /*@__PURE__*/ createComponent<KulTreeElement, KulTreeEvents>({
    tagName: 'kul-tree',
    elementClass: KulTreeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulTreeEvent: 'kul-tree-event' } as KulTreeEvents,
    defineCustomElement: defineKulTree
});

type KulTypewriterEvents = { onKulTypewriterEvent: EventName<KulTypewriterCustomEvent<KulTypewriterEventPayload>> };

export const KulTypewriter: StencilReactComponent<KulTypewriterElement, KulTypewriterEvents> = /*@__PURE__*/ createComponent<KulTypewriterElement, KulTypewriterEvents>({
    tagName: 'kul-typewriter',
    elementClass: KulTypewriterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulTypewriterEvent: 'kul-typewriter-event' } as KulTypewriterEvents,
    defineCustomElement: defineKulTypewriter
});

type KulUploadEvents = { onKulUploadEvent: EventName<KulUploadCustomEvent<KulUploadEventPayload>> };

export const KulUpload: StencilReactComponent<KulUploadElement, KulUploadEvents> = /*@__PURE__*/ createComponent<KulUploadElement, KulUploadEvents>({
    tagName: 'kul-upload',
    elementClass: KulUploadElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onKulUploadEvent: 'kul-upload-event' } as KulUploadEvents,
    defineCustomElement: defineKulUpload
});
